Menu="OtherSettings"
Type="xmenu"
Title="SnapRAID"
Icon="scissors"
Tag="scissors"
Markdown="false"
---
<?
/* Copyright Derek Macias (parts of code from NUT package)
 * Copyright macester (parts of code from NUT package)
 * Copyright gfjardim (parts of code from NUT package)
 * Copyright SimonF (parts of code from NUT package)
 * Copyright Dan Landon (parts of code from Web GUI)
 * Copyright Bergware International (parts of code from Web GUI)
 * Copyright Lime Technology (any and all other parts of Unraid)
 *
 * Copyright desertwitch (as author and maintainer of this file)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License 2
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 */
require_once '/usr/local/emhttp/plugins/dwsnap/include/dwsnap_config.php';

$snap_lastsync_html = "-";
$snap_lastscrub_html = "-";

if($dwsnap_active_cfg->lastsync !== "-") { $snap_lastsync_html = $dwsnap_active_cfg->lastsync . " (<strong>" . dwsnap_time_ago($dwsnap_active_cfg->lastsync, $dwsnap_active_cfg->sync_expires) . "</strong>)"; } else { $snap_lastsync_html = "<span class='orange-text'><strong>Never</strong></span>"; }
if($dwsnap_active_cfg->lastscrub !== "-") { $snap_lastscrub_html = $dwsnap_active_cfg->lastscrub . " (<strong>" . dwsnap_time_ago($dwsnap_active_cfg->lastscrub, $dwsnap_active_cfg->scrub_expires) . "</strong>)"; } else { $snap_lastscrub_html = "<span class='orange-text'><strong>Never</strong></span>"; }

if($dwsnap_active_cfg->lastsync !== "-" && $dwsnap_active_cfg->lastnodiff !== "-" && !empty($snap_lastsync_html)) {
    $snap_lastsync_html_bak = $snap_lastsync_html;
    try {
        $st_now = time();
        $st_lastsync = strtotime($dwsnap_active_cfg->lastsync);
        $st_lastnodiff = strtotime($dwsnap_active_cfg->lastnodiff);
        $st_lastsync_diff = abs($st_now - $st_lastsync);
        $st_lastnodiff_diff = abs($st_now - $st_lastnodiff);
        $snap_lastnodiff_ago = dwsnap_time_ago($dwsnap_active_cfg->lastnodiff, $dwsnap_active_cfg->sync_expires);
        if($st_lastnodiff_diff < $st_lastsync_diff) {
            if (strpos($snap_lastnodiff_ago, "orange-text") !== false) {
                $snap_lastsync_html = str_replace("green-text", "orange-text", $snap_lastsync_html);
            } else {
                $snap_lastsync_html = str_replace("orange-text", "green-text", $snap_lastsync_html);
            }
        }
    } catch (Throwable $e) { // For PHP 7
        $snap_lastsync_html = $snap_lastsync_html_bak;
    } catch (Exception $e) { // For PHP 5
        $snap_lastsync_html = $snap_lastsync_html_bak;
    }
}
?>

<style type="text/css">
.snaplog {
    height: 400px;
    max-height: 400px;
    overflow: auto;
    word-break: normal !important;
    word-wrap: normal !important;
    white-space: pre !important;
    <?if($dwsnap_screenimg == "enable"):?>
    background: transparent url("<?=($display["theme"] == 'white' || $display["theme"] == 'azure') ? "/plugins/dwsnap/images/screen.png" : "/plugins/dwsnap/images/screen-alt.png";?>") no-repeat scroll center;
    <?endif;?> 
}
.snapdisks tr:nth-child(2) > th {
    text-align: center !important;
}
.snapdisks td {
    text-align: center !important;
}
.snapdisks input {
    height: 30px;
    font-size: x-small;
}
.snapdisktype {
    font-family: bitstream;
    font-size: 1.1rem;
}
</style>

<table class="tablesorter shift" autofocus>
    <thead>
        <tr>
            <th><i id="snapstatusicon" class="fa fa-cog fa-spin" style="display:none;"></i> <strong>(<?=$dwsnap_active_cfg->cfgname;?>) Array Operation Screen</strong></th>
            <th style="text-transform: none;"><strong>Started:</strong> <em><?=$dwsnap_active_cfg->laststart?></em></th>
            <th style="text-transform: none;"><strong>Finished:</strong> <em><?=$dwsnap_active_cfg->lastfinish?></em><span style="float:right;"><strong>Refresh:</strong> <i id="logcontrol" class="fa fa-refresh fa-spin"></i></span></th>
        </tr>
    </thead>
</table>

<span id="logviewer"><div style="text-align:center;"><i class="fa fa-spinner fa-spin"></i> <em>Please wait, retrieving information...</em></div></span>

<form markdown="0" id="snapcommands" name="snapcommands" method="POST" action="/update.php" target="progressFrame">
    <input type="hidden" id="command" name="#command" value="/usr/local/emhttp/plugins/dwsnap/scripts/none">
    <input type="hidden" id="arg1" name="#arg[1]" value="<?=$dwsnap_active_cfg->cfgname;?>">
    <input type="hidden" id="arg2" name="#arg[2]" value="">
    <input type="hidden" id="arg3" name="#arg[3]" value="">
    <input type="hidden" id="arg4" name="#arg[4]" value="">
    <input type="hidden" id="arg5" name="#arg[5]" value="">
    <input type="hidden" id="arg6" name="#arg[6]" value="">
    <input type="hidden" id="arg7" name="#arg[7]" value="">
    <input type="hidden" id="arg8" name="#arg[8]" value="">
    <input type="hidden" id="arg9" name="#arg[9]" value="">
    <input type="hidden" id="arg10" name="#arg[10]" value="">
    <input type="hidden" id="arg11" name="#arg[11]" value="">
    <input type="hidden" id="arg12" name="#arg[12]" value="">
    <input type="hidden" id="arg13" name="#arg[13]" value="">
    <input type="hidden" id="arg14" name="#arg[14]" value="">
    <input type="hidden" id="arg15" name="#arg[15]" value="">
    <input type="hidden" id="arg16" name="#arg[16]" value="">
    <input type="hidden" id="arg17" name="#arg[17]" value="">
    <input type="hidden" id="arg18" name="#arg[18]" value="">
    <input type="hidden" id="arg19" name="#arg[19]" value="">

    <input class="snaprun snaphelptip" type="button" id="snapstatus" value="STATUS" title="Prints a summary of the state of the disk array. It includes information about the parity fragmentation, how long the blocks have not been checked, and all the recorded silent errors encountered while scrubbing. Note that the information presented refers to the last time you ran SYNC. Later modifications to the array data are not taken into account.">
    <input class="snaprun snaphelptip" type="button" id="snaplist" value="LIST" title="Lists all the files contained in the array at the time of the last SYNC.">
    <input class="snaprun snaphelptip" type="button" id="snapdiff" value="DIFF" title="Lists all the files modified since the last SYNC and not part of the snapshot in this state. This command doesn't check the file data, but only the file time-stamp size and inode (compared against the snapshot).">
    <input class="snaprun snaphelptip" type="button" id="snapdup" value="DUP" title="Lists all the duplicate files. Two files are assumed equal if their hashes are matching.">
    <input class="snaprun snaphelptip" type="button" id="snapscrub" value="SCRUB" title="Scrubs the array, checking for silent or input/output errors in data and parity disks. For each default command invocation, about 8% of the array is checked, but nothing that was already scrubbed in the last 10 days.">
    <input class="snaprun snaphelptip" type="button" id="snapcheck" value="CHECK" title="Verify all the files and the parity data. It works like FIX, but it only simulates a recovery and no changes are written.">

    <span style="float:right;">
        <input class="snaprun snaphelptip" type="button" id="clearoutput" value="CLEAR SCREEN" title="Clears the array's output screen of the current/previous array operation.">
        <input class="snaprun snaphelptip" type="button" id="clearlogs" value="CLEAR ALL LOGS" title="Deletes the array's SnapRAID logfiles, also including the array's output screen of the current/previous array operation.">
        <input class="snapnotrun snaphelptip" type="button" id="snapstop" value="STOP OPERATION" title="Attempts to stop the array's running SnapRAID instances.">
        <input class="snapnotrun snaphelptip" type="button" id="snapkill" value="KILL OPERATION" title="Kills the array's running SnapRAID instances with SIGKILL. Beware DATA CORRUPTION can be a possible result of this action.">
    </span><br>

    <input class="snaprun snaphelptip" type="button" id="snapsync" value="SYNC" title="Updates the parity information. All the modified files in the disk array are read, and the corresponding parity data is updated. This is the equivalent of taking a snapshot, which will be the base for all recoveries.">
    <input class="snaprun snaphelptip" type="button" id="snaphashedsync" value="PREHASHED SYNC" title="Updates the parity information. All the modified files in the disk array are read, and the corresponding parity data is updated. This is the equivalent of taking a snapshot, which will be the base for all recoveries. A preliminary hashing phase of all the new data, to have an additional verification before the actual parity computation, is performed.">
    <input class="snaprun snaphelptip" type="button" id="snaptouch" value="TOUCH" title="Sets arbitrarily the sub-second time-stamp of all the files that have it at zero. This improves the SnapRAID capability to recognize moved and copied files as it makes the time-stamp almost unique, mitigating possible duplicates.">
    <input class="snaprun snaphelptip" type="button" id="snapfix" value="FIX" title="Fix all the files and the parity data. All the files and the parity data are compared with the snapshot state saved in the last SYNC. If a difference is found, it's reverted to the stored snapshot. The FIX command doesn't differentiate between errors and intentional modifications. It unconditionally reverts the file state to the last SYNC. If no other option is specified, the full array is processed. Use the filter options to select a subset of files or disks to operate on if you do not want this.">
    <input class="snaprun snaphelptip" type="button" id="snapfixmissing" value="FIX MISSING" title="Fix all the files and the parity data. All the files and the parity data are compared with the snapshot state saved in the last SYNC. If a difference is found, it's reverted to the stored snapshot. The FIX command doesn't differentiate between errors and intentional modifications. It unconditionally reverts the file state to the last SYNC. Only all files missing or deleted from the array are processed by this specific command.">
    <input class="snaprun snaphelptip" type="button" id="snapfixerrors" value="FIX ERRORS" title="Fix all the files and the parity data. All the files and the parity data are compared with the snapshot state saved in the last SYNC. If a difference is found, it's reverted to the stored snapshot. The FIX command doesn't differentiate between errors and intentional modifications. It unconditionally reverts the file state to the last SYNC. Only files that have blocks marked with silent or input/output errors during previous SYNC and SCRUB operations are processed by this command.">

    <span style="float:right;">
        <input class="snaprun snaphelptip" type="button" id="crontest" value="RUN MAINTENANCE CRONJOB" title="Runs the array's maintenance now.">
    </span><br>

    <div id="snapopts"> 
        <strong>Event Notifications:</strong>
        <input type="checkbox" id="snap-notifyme" value="snap-notifyme">
        <label for="snap-notifyme" title="Sends a notification when the manually started array operation finishes (using Unraid's system-wide notification settings)." class="snaphelptip">On Operation Complete</label>
        <span style="margin-left:10px"><strong>Check Filters:</strong></span>
        <input type="checkbox" id="snapcheck-missing" value="snapcheck-missing">
        <label for="snapcheck-missing" title="Check all files marked as missing." class="snaphelptip">(Check) All Missing</label>
        <input type="checkbox" id="snapcheck-errors" value="snapcheck-errors">
        <label for="snapcheck-errors" title="Check all files marked with errors." class="snaphelptip">(Check) All Errors</label>
        
        <span style="float:right;margin-right:10px"><a href="https://www.snapraid.it/manual" target="_blank" title="SnapRAID User Manual"><i class="fa fa-file-text-o"></i> User Manual</a> / <a href="https://www.snapraid.it/faq" target="_blank" title="SnapRAID FAQ"><i class="fa fa-question-circle-o"></i> Frequently Asked Questions</a></span>
        
        <br><strong>Advanced Parameters:</strong>
        <input type="checkbox" id="snapcheck-auditonly" value="snapcheck-auditonly">
        <label for="snapcheck-auditonly" title="When running a CHECK, only verifies the hash of the files, but not doing any kind of checks on the parity data. If you are interested in checking only the file data, this option can speed up a lot the checking process." class="snaphelptip">(Check) Audit Only</label>
        <input type="checkbox" id="snapsync-forcefull" value="snapsync-forcefull">
        <label for="snapsync-forcefull" title="In SYNC forces a full recomputation of the parity. This option can be used when you add a new parity level, or if you reverted back to an old content file using more recent parity data. Instead of recreating the parity from scratch, this allows to reuse the hashes present in the content file to validate data, and to maintain data protection during the SYNC process using the parity data you have." class="snaphelptip">(Sync) Force Full</label>
        <input type="checkbox" id="snapsync-forcezero" value="snapsync-forcezero">
        <label for="snapsync-forcezero" title="Forces the insecure operation of syncing a file with zero size that before was not. If SnapRAID detects a such condition, it stops proceeding unless you specify this option." class="snaphelptip">(Sync) Force Zero</label>
        <input type="checkbox" id="snapsync-forceempty" value="snapsync-forceempty">
        <label for="snapsync-forceempty" title="Forces the insecure operation of syncing a disk with all the files missing. If SnapRAID detects that all the files originally present in the disk are missing or rewritten, it stops proceeding unless you specify this option." class="snaphelptip">(Sync) Force Empty</label>
        <span style="float:right;margin-right:10px;">Please always read and understand the manual before acting!</span>
       
        <br><strong>Scrub Selectors:</strong>
        <input type="radio" id="snapscrub-plan" name="snapscrub-opts" value="snapscrub-plan">
        (Scrub) <input type="text" id="snapscrub-age" class="snaphelptip" style="margin-right:0px;width:60px;" title="Scrub blocks not scrubbed for (x) days." placeholder="days">
        (Scrub) <input type="text" id="snapscrub-percent" class="snaphelptip" style="margin-right:0px;width:60px;" title="Scrub (x) percent of scrubbable blocks." placeholder="percent">
        <input type="radio" id="snapscrub-new" name="snapscrub-opts" value="snapscrub-new">
        <span title="Scrub only blocks not yet scrubbed." class="snaphelptip">(Scrub) New Blocks</span>
        <input type="radio" id="snapscrub-bad" name="snapscrub-opts"  value="snapscrub-bad">
        <span title="Scrub only blocks previously marked as bad." class="snaphelptip">(Scrub) Bad Blocks</span>
        <input type="radio" id="snapscrub-full" name="snapscrub-opts" value="snapscrub-full">
        <span title="Scrub the whole array." class="snaphelptip">(Scrub) Full</span>
        <span style="float:right;margin-right:10px;">SnapRAID &copy; 2011-2024 Andrea Mazzoleni - All Rights Reserved</span>
            
        <br><strong>Screen Settings:</strong>
        <input type="radio" id="snap-verbose" name="snap-verbosity" value="snap-verbose">
        <span title="Prints more information on the screen." class="snaphelptip">Verbose</span>
        <input type="radio" id="snap-hideprogress" name="snap-verbosity" value="snap-hideprogress">
        <span title="Hides any repetitive progress output." class="snaphelptip">Hide Progress Output</span>
        <span style="margin-left:10px"><strong>Interrupt Thresholds:</strong></span>
        (Sync/Scrub) <input type="text" id="snapsync-errorlimit" class="snaphelptip" style="width:140px;" title="Sets a new error limit before stopping execution. By default SnapRAID stops if it encounters more than 100 Input/Output errors, meaning that a disk is likely dying." placeholder="I/O Error Limit">
 
        <br><strong>Data Subset Selection Filters:</strong>
        (Check/Fix) <input type="text" id="snapfix-pattern" class="snaphelptip" style="width:205px;" title="Run a command only on a certain set of data." placeholder="Path Pattern (See Manual)">
        (Check/Fix) <input type="text" id="snapfix-diskpattern" title="Run a command only on a certain disk." class="narrow snaphelptip" placeholder="Disk Name">

        <br><strong>Recovery Parameters for Experts:</strong>
        <input type="checkbox" id="snapsync-forcerealloc" value="snapsync-forcerealloc">
        <label for="snapsync-forcerealloc" title="In SYNC forces a full reallocation and rebuild of the parity. This option can be used to remove fragmentation, reusing the hashes present in the content file to validate data. This option is for experts only, it's highly recommended to not use it. You DO NOT have data protection during the SYNC operation." class="snaphelptip">(Sync) Force Realloc</label>
        <span style="margin-left:10px;">
        (Check/Fix) <input type="text" id="snapfix-blkstart" class="snaphelptip" style="margin-right:0px;width:110px;" title="Starts the processing from the specified block number. It could be useful to retry to CHECK or FIX some specific block, in case of a damaged disk. It's present mainly for advanced manual recovering." placeholder="Block Start">
        (Check/Fix) <input type="text" id="snapfix-blkcount" class="snaphelptip" style="margin-right:0px;width:110px;" title="Processes only the specified number of blocks. It's present mainly for advanced manual recovering." placeholder="Block Count">
        </span>

        <br><strong>Operational Safety Overrides:</strong>
        <input type="checkbox" id="snapsync-forcenocopy" value="forcenocopy">
        <label for="snapsync-forcenocopy" title="In SYNC, CHECK and FIX disables the copy detection heuristic. Without this option SnapRAID assumes that files with same attributes, like name, size and time-stamp are copies with the same data. This allows to identify copied or moved files from one disk to another, and to reuse the already computed hash information to detect silent errors or to recover missing files. This, in some rare cases, may result in false positives or in a slow process due to the many hash verifications, which this option resolves." class="snaphelptip">(Sync/Check/Fix) Force No-Copy</label>
        <input type="checkbox" id="snapcheck-forceuuid" value="snapcheck-forceuuid">
        <label for="snapcheck-forceuuid" title="Forces the insecure operation of syncing, checking and fixing with disks that have changed their UUID. If SnapRAID detects that some disks have changed UUID, it stops proceeding unless you specify this option. This allows to detect when your disks are mounted in the wrong mount points. It's anyway allowed to have a single UUID change with single parity, and more with multiple parity, because it's a normal situation when replacing disks as part of a recovery." class="snaphelptip">(Sync/Check/Fix) Force UUID</label>
        <input type="checkbox" id="snapfix-forcedevice" value="snapfix-forcedevice">
        <label for="snapfix-forcedevice" title="Forces the insecure operation of fixing with inaccessible disks, or with disks on the same physical device. For example if you lost two data disks, and you have a spare disk to recover only the first one, and you want to ignore the second inaccessible disk. Alternatively, if you want to recover a disk in the free space left on an already used disk, meaning on the same physical device." class="snaphelptip">(Fix) Force Device</label>    
    
        <br><strong>Raw Operation Report Alternative Location:</strong>
        <input type="text" id="snap-rawreport" title="An alternative path for the raw operation report file, which can grow extremely large in size (up to many GBs). This can be useful on systems where SnapRAID's RAM disk is too small for raw operation report files. This parameter overrides the setting which generally controls creation of raw operation report files, meaning when an alternative path is set, a raw operation report file will always be generated for the single operation." class="snaphelptip" placeholder="Full File Path (e.g. /mnt/cache/operation-raw.log)">

    </div><br>

    <div><strong>INFORMATION:</strong></div>
    <div>When using SnapRAID on top of Unraid's parity, always attempt to recover disk failures using Unraid's parity first, before using any SnapRAID recovery functions.</div>
    <div>Ideally you can restore a disk failure with Unraid and then fix any file level corruption on the recovered disk using a previous (non-corrupted) SnapRAID snapshot.</div>
    <div>A failing disk may write bogus data before Unraid disables it (if at all), and SnapRAID may fill that gap to recover from corruption using a sync state from before that.</div>
    
    <br>
    <?
        $snap_syncneeded_html = "";
        $snap_unmounted_disks_html = "";
        $snap_missingram_html = "";
        $snap_highram_html = "";

        $snap_disk_fs = htmlspecialchars(trim(shell_exec("cat /etc/mtab 2>/dev/null | grep /var/lib/snapraid 2>/dev/null | awk '{print $3}' 2>/dev/null") ?? "-"));
        if($snap_disk_fs == "-") {
            $snap_missingram_html = "<span class='snaphelptip' style='margin-left:10px;color:red;' title='SnapRAID was not able to create a RAM disk for its operational output. It is now running on the rootfs (/) with unlimited RAM, which is the fallback method and not recommended for safe operation. Please recreate the RAM disk manually on this page to avoid future system instabilities due to excessive RAM usage. The disk utilization currently shown for the RAM disk is that of the rootfs (/).'><i class='fa fa-exclamation-triangle'></i> <strong>Missing RAM Disk</strong></span>";
        }

        $snap_disk_util = htmlspecialchars(trim(shell_exec("df --output=pcent /var/lib/snapraid 2>/dev/null | tr -dc '0-9' 2>/dev/null") ?? "-"));
        if($snap_disk_util !== "-") {
            $snap_highram_html = ($snap_disk_util < 90) ? "" : "<span class='snaphelptip' style='margin-left:10px;color:red;' title='Your RAM disk utilization is above 90%, please clear the SnapRAID logfiles to ensure the continued operation of SnapRAID.'><i class='fa fa-exclamation-triangle'></i> <strong>RAM Disk Utilization</strong></span>";
        }

        if(!empty($dwsnap_active_cfg->parity_disks) || !empty($dwsnap_active_cfg->data_disks)) {
            if(file_exists("/boot/config/plugins/dwsnap/config/".$dwsnap_active_cfg->cfgname."-syncneeded")) {
                $snap_syncneeded_html = "<span class='snaphelptip' style='margin-left:10px;color:red;' title='Differences between the last sync (snapshot) state and the data present in the array were found. If these changes were intentional, a SYNC operation is required for any such changes to also be protected in case of disk failure. If these changes were not intentional, a FIX operation can help revert the array data back to the last sync (snapshot) state.'><i class='fa fa-exclamation-triangle'></i> <strong>Data Differences (Not in Sync)</strong></span>";
            }

            $snap_all_disks_mounted = true;
            foreach ($dwsnap_active_cfg->parity_disks as $snap_parity_disk) {
                $snap_disk_fs = htmlspecialchars(trim(shell_exec("cat /etc/mtab 2>/dev/null | grep '" . $snap_parity_disk[2] . " ' 2>/dev/null | awk '{print $3}' 2>/dev/null") ?? "-"));
                if($snap_disk_fs == "-") { $snap_all_disks_mounted = false; }
            }
            foreach ($dwsnap_active_cfg->data_disks as $snap_data_disk) {
                $snap_disk_fs = htmlspecialchars(trim(shell_exec("cat /etc/mtab 2>/dev/null | grep '" . $snap_data_disk[2] . " ' 2>/dev/null | awk '{print $3}' 2>/dev/null") ?? "-"));
                if($snap_disk_fs == "-") { $snap_all_disks_mounted = false; }
            }

            if(!$snap_all_disks_mounted) {
                $snap_unmounted_disks_html = "<span class='snaphelptip' style='margin-left:10px;color:red;' title='At least one configured disk is not online and/or mounted, please check both your configuration and the actual disks for issues.'><i class='fa fa-exclamation-triangle'></i> <strong>Missing Disk(s)</strong></span>";
            }
        }
    ?>
    <table class="tablesorter snapdisks">
        <thead>
            <tr>
                <th colspan="10"><strong>(<?=$dwsnap_active_cfg->cfgname;?>) ARRAY WITH INDIVIDUAL DISKS</strong> <span style="text-transform: none;float:right;"><?=$snap_missingram_html?><?=$snap_highram_html?><?=$snap_unmounted_disks_html?><?=$snap_syncneeded_html?><span style="margin-left:10px;"><strong>Last Sync:</strong> <?=$snap_lastsync_html?></span><span style="margin-left:10px;"><strong>Last Scrub:</strong> <?=$snap_lastscrub_html?></span></span></th>
            </tr>
            <tr>
                 <th><strong>Disk Type</strong></th><th><strong>Disk Name</strong></th><th><strong>Mountpoint</strong></th><th><strong>Mounted</strong></th><th><strong>FileSystem</strong></th><th><strong>Total Space</strong></th><th><strong>Used Space</strong></th><th><strong>Free Space</strong></th><th><strong>Utilization</strong></th><th><strong>Disk-Specific Operations</strong><br><span style="font-size:x-small;"><em>Options Selected From Above Apply</em></span></th>
            </tr>
        </thead>
        <tbody>
            <?
            if(!empty($dwsnap_active_cfg->parity_disks) || !empty($dwsnap_active_cfg->data_disks)) {
                foreach ($dwsnap_active_cfg->parity_disks as $snap_parity_disk){
                    $snap_disk_fs = htmlspecialchars(trim(shell_exec("cat /etc/mtab 2>/dev/null | grep '" . $snap_parity_disk[2] . " ' 2>/dev/null | awk '{print $3}' 2>/dev/null") ?? "-"));
                    $snap_disk_util = htmlspecialchars(trim(shell_exec("df -B1 " . escapeshellarg($snap_parity_disk[2]) . " 2>/dev/null | grep " . escapeshellarg($snap_parity_disk[2]) . " 2>/dev/null | awk '{print $5}' 2>/dev/null") ?? "-"));
                    $snap_disk_free = htmlspecialchars(dwsnap_humanFileSize(trim(shell_exec("df -B1 " . escapeshellarg($snap_parity_disk[2]) . " 2>/dev/null | grep " . escapeshellarg($snap_parity_disk[2]) . " 2>/dev/null | awk '{print $4}' 2>/dev/null") ?? "-")));
                    $snap_disk_used = htmlspecialchars(dwsnap_humanFileSize(trim(shell_exec("df -B1 " . escapeshellarg($snap_parity_disk[2]) . " 2>/dev/null | grep " . escapeshellarg($snap_parity_disk[2]) . " 2>/dev/null | awk '{print $3}' 2>/dev/null") ?? "-")));
                    $snap_disk_total = htmlspecialchars(dwsnap_humanFileSize(trim(shell_exec("df -B1 " . escapeshellarg($snap_parity_disk[2]) . " 2>/dev/null | grep " . escapeshellarg($snap_parity_disk[2]) . " 2>/dev/null | awk '{print $2}' 2>/dev/null") ?? "-")));
                    $snap_disk_status = ($snap_disk_fs !== "-") ? "<i class='fa fa-check green-text'></i>" : "<i class='fa fa-times red-text'></i>"; 
                    $snap_parity_level = htmlspecialchars(strtoupper($snap_parity_disk[1]));
                    $snap_parity_name = htmlspecialchars($snap_parity_disk[1]);
                    $snap_parity_mount = htmlspecialchars($snap_parity_disk[2]);
                    echo <<<END
                    <tr>
                    <td class="snapdisktype">$snap_parity_level</td>
                    <td>$snap_parity_name</td>
                    <td>
                        <a class="view" href="/Shares/Browse?dir=$snap_parity_mount/" target="_blank">
                        <i class="icon-u-tab" title="Browse $snap_parity_mount/"></i>
                        </a>$snap_parity_mount
                    </td>
                    <td>$snap_disk_status</td>
                    <td>$snap_disk_fs</td>
                    <td>$snap_disk_total</td>
                    <td>$snap_disk_used</td>
                    <td>$snap_disk_free</td>
                    <td>$snap_disk_util</td>
                    <td>
                        <input type="button" class="snaprun snaphelptip" id="$snap_parity_name-check" value="Check" title="Verify all the files and the parity data. It works like FIX, but it only simulates a recovery and no changes are written. This command only processes the selected disk.">
                        <input type="button" class="snaprun snaphelptip" id="$snap_parity_name-fix" value="Fix" title="Fix all the files and the parity data. All the files and the parity data are compared with the snapshot state saved in the last SYNC. If a difference is found, it is reverted to the stored snapshot. The FIX command does not differentiate between errors and intentional modifications. It unconditionally reverts the file state to the last SYNC. This command only processes the selected disk.">
                        <input type="button" class="snaprun snaphelptip" id="$snap_parity_name-fixmissing" value="Fix Missing" title="Fix all the files and the parity data. All the files and the parity data are compared with the snapshot state saved in the last SYNC. If a difference is found, it is reverted to the stored snapshot. The FIX command does not differentiate between errors and intentional modifications. It unconditionally reverts the file state to the last SYNC. Only processes missing or deleted files on the selected disk.">
                    </td>
                    </tr>
END;
                }
                foreach ($dwsnap_active_cfg->data_disks as $snap_data_disk){
                    $snap_disk_fs = htmlspecialchars(trim(shell_exec("cat /etc/mtab 2>/dev/null | grep '" . $snap_data_disk[2] . " ' 2>/dev/null | awk '{print $3}' 2>/dev/null") ?? "-"));
                    $snap_disk_util = htmlspecialchars(trim(shell_exec("df -B1 " . escapeshellarg($snap_data_disk[2]) . " 2>/dev/null | grep " . escapeshellarg($snap_data_disk[2]) . " 2>/dev/null | awk '{print $5}' 2>/dev/null") ?? "-"));
                    $snap_disk_free = htmlspecialchars(dwsnap_humanFileSize(trim(shell_exec("df -B1 " . escapeshellarg($snap_data_disk[2]) . " 2>/dev/null | grep " . escapeshellarg($snap_data_disk[2]) . " 2>/dev/null | awk '{print $4}' 2>/dev/null") ?? "-")));
                    $snap_disk_used = htmlspecialchars(dwsnap_humanFileSize(trim(shell_exec("df -B1 " . escapeshellarg($snap_data_disk[2]) . " 2>/dev/null | grep " . escapeshellarg($snap_data_disk[2]) . " 2>/dev/null | awk '{print $3}' 2>/dev/null") ?? "-")));
                    $snap_disk_total = htmlspecialchars(dwsnap_humanFileSize(trim(shell_exec("df -B1 " . escapeshellarg($snap_data_disk[2]) . " 2>/dev/null | grep " . escapeshellarg($snap_data_disk[2]) . " 2>/dev/null | awk '{print $2}' 2>/dev/null") ?? "-")));
                    $snap_disk_status = ($snap_disk_fs !== "-") ? "<i class='fa fa-check green-text'></i>" : "<i class='fa fa-times red-text'></i>"; 
                    $snap_data_name = htmlspecialchars($snap_data_disk[1]);
                    $snap_data_mount = htmlspecialchars($snap_data_disk[2]);
                    echo <<<END
                    <tr>
                    <td class="snapdisktype">DATA</td>
                    <td>$snap_data_name</td>
                    <td>
                        <a class="view" href="/Shares/Browse?dir=$snap_data_mount/" target="_blank">
                        <i class="icon-u-tab" title="Browse $snap_data_mount/"></i>
                        </a>$snap_data_mount
                    </td>
                    <td>$snap_disk_status</td>
                    <td>$snap_disk_fs</td>
                    <td>$snap_disk_total</td>
                    <td>$snap_disk_used</td>
                    <td>$snap_disk_free</td>
                    <td>$snap_disk_util</td>
                    <td>
                        <input type="button" class="snaprun snaphelptip" id="$snap_data_name-check" value="Check" title="Verify all the files and the parity data. It works like FIX, but it only simulates a recovery and no changes are written. This command only processes the selected disk.">
                        <input type="button" class="snaprun snaphelptip" id="$snap_data_name-fix" value="Fix" title="Fix all the files and the parity data. All the files and the parity data are compared with the snapshot state saved in the last SYNC. If a difference is found, it is reverted to the stored snapshot. The FIX command does not differentiate between errors and intentional modifications. It unconditionally reverts the file state to the last SYNC. This command only processes the selected disk.">
                        <input type="button" class="snaprun snaphelptip" id="$snap_data_name-fixmissing" value="Fix Missing" title="Fix all the files and the parity data. All the files and the parity data are compared with the snapshot state saved in the last SYNC. If a difference is found, it is reverted to the stored snapshot. The FIX command does not differentiate between errors and intentional modifications. It unconditionally reverts the file state to the last SYNC. Only processes missing or deleted files on the selected disk.">
                    </td>
                    </tr>
END;
                }
            }
            else {
                echo("<tr><td colspan='10'><em>There are no disks currently configured for this array.</em></td></tr>");
            }

            $snap_disk_fs = htmlspecialchars(trim(shell_exec("cat /etc/mtab 2>/dev/null | grep /var/lib/snapraid 2>/dev/null | awk '{print $3}' 2>/dev/null") ?? "-"));
            $snap_disk_util = htmlspecialchars(trim(shell_exec("df --output=pcent /var/lib/snapraid 2>/dev/null | tr -dc '0-9' 2>/dev/null") ?? "-"));
            $snap_disk_free = htmlspecialchars(dwsnap_humanFileSize(trim(shell_exec("df -B1 /var/lib/snapraid 2>/dev/null | grep /var/lib/snapraid 2>/dev/null | awk '{print $4}' 2>/dev/null") ?? "-")));
            $snap_disk_used = htmlspecialchars(dwsnap_humanFileSize(trim(shell_exec("df -B1 /var/lib/snapraid 2>/dev/null | grep /var/lib/snapraid 2>/dev/null | awk '{print $3}' 2>/dev/null") ?? "-")));
            $snap_disk_total = htmlspecialchars(dwsnap_humanFileSize(trim(shell_exec("df -B1 /var/lib/snapraid 2>/dev/null | grep /var/lib/snapraid 2>/dev/null | awk '{print $2}' 2>/dev/null") ?? "-")));
            $snap_disk_status = ($snap_disk_fs !== "-") ? "<i class='fa fa-check green-text'></i>" : "<i class='fa fa-times red-text'></i>"; 
            
            if($snap_disk_util !== "-") {
                $snap_disk_util = ($snap_disk_util < 90) ? "{$snap_disk_util}%" : "<span class='red-text snaphelptip' title='Your RAM disk utilization is above 90%, please clear the SnapRAID logfiles to ensure the continued operation of SnapRAID.'>{$snap_disk_util}%</span>";
            }

            echo <<<END
            <tr style="border: 1px solid;">
            <td class="snapdisktype"><span class="snaphelptip" style="cursor:help;" title="This system disk is located in RAM and used for all SnapRAID operational output. The total space only displays the maximum possible RAM usage, the RAM itself is not reserved.">RAM<sup>?</sup></span></td>
            <td>system</td>
            <td>/var/lib/snapraid</td>
            <td>$snap_disk_status</td>
            <td>$snap_disk_fs</td>
            <td>$snap_disk_total</td>
            <td>$snap_disk_used</td>
            <td>$snap_disk_free</td>
            <td>$snap_disk_util</td>
            <td>
                <input class="snapanyrun snaphelptip" type="button" id="fixramdisk" value="RECREATE DISK" title="Recreates and fixes any issues with the RAM disk used for all SnapRAID operational output - beware that all arrays logfiles are also deleted when recreating the RAM disk.">
                <input class="snapanyrun snaphelptip" type="button" id="clearlogs2" value="CLEAR ALL LOGS" title="Deletes all arrays SnapRAID logfiles, also including the array's output screen of the current/previous array operation.">
            </td>
            </tr>
END;
        ?>
        </tbody>
    </table>
</form> 

<script type="text/javascript">
function getSnapLogs() {
    $.get('/plugins/dwsnap/include/dwsnap_logger.php', {"config": "<?=$dwsnap_active_cfg->cfgname;?>"}, function(data) {
        if (data) { 
            $('#logviewer').html(data); 
	        var pre = $(".snaplog");
	        pre.scrollTop(pre.prop("scrollHeight"));
	    }
    });
    clearTimeout(timers.getSnapLogs);
    timers.getSnapLogs = setTimeout(getSnapLogs, 1000);
}
function getSnapStatus() {
    $.get('/plugins/dwsnap/include/dwsnap_status.php', {"config": "<?=$dwsnap_active_cfg->cfgname;?>"}, function(data) {
        if (data) {
            var statusResponse = data.split(",");
            if(statusResponse[0]) {
                if(statusResponse[0] === "ANY:YES") {
                    $('.snapanyrun').prop('disabled', true);
                    $('.snapanynotrun').prop('disabled', false);
                } else if (statusResponse[0] === "ANY:NO") {
                    $('.snapanyrun').prop('disabled', false);
                    $('.snapanynotrun').prop('disabled', true);
                } 
            }
            if(statusResponse[1]) {
                if(statusResponse[1] === "ARRAY:YES") {
                    $('#snapstatusicon').show();
                    $('.snaprun').prop('disabled', true);
                    $('.snapnotrun').prop('disabled', false);
                } else if (statusResponse[1] === "ARRAY:NO") {
                    if($('#snapstatusicon').is(":visible")) {
                        location = '/Settings/dwsnapOps?snapr=<?=$dwsnap_active_cfg->cfgname;?>'; 
                    }
                    $('#snapstatusicon').hide();
                    $('.snaprun').prop('disabled', false);
                    $('.snapnotrun').prop('disabled', true);
                    $('#logcontrol').attr("class", "fa fa-refresh");
                    clearTimeout(timers.getSnapLogs);
                }
            }
	    }
    });
    clearTimeout(timers.getSnapStatus);
    timers.getSnapStatus = setTimeout(getSnapStatus, 3000);
}
function toggleSnapLogs() {
    if($('#logcontrol').attr("class") == "fa fa-refresh fa-spin") {
        $('#logcontrol').attr("class", "fa fa-refresh");
        clearTimeout(timers.getSnapLogs);
    } else {
        $('#logcontrol').attr("class", "fa fa-refresh fa-spin");
        getSnapLogs();
    }
}
function confirmCommandAndSubmit() {
    var snapCmd = "snapraid ";
    $('[id^="arg"]').slice(2).each(function() {
        if($(this).val()) {
            snapCmd += $(this).val() + " ";
        }
    });
    swal({
        title: "Review Command",
        text: "Are you absolutely certain that this is the operation you want to run?<br>Please refer to the <a href='https://www.snapraid.it/manual' target='_blank'>SnapRAID manual</a> again if you are not 100% sure.<br><pre>" + snapCmd.trim() + "</pre>This operation will be running on array: <span style='font-weight:bold;'><?=strtoupper($dwsnap_active_cfg->cfgname);?></span>.<br>Be advised there will be no more confirmations after this message.",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Start Operation",
        html: true
        },
        function(isConfirmed){
            if(isConfirmed) {
                $('#snapcommands').submit();
            } else {
                $('#command').val(""); 
                $('[id^="arg"]:not(:first)').each(function() {
                    $(this).val("");
                });
            }
        });
}
$(function(){

    if("<?=$dwsnap_selected_array_missing;?>" === "yes") {
        location = '/Settings/dwsnapOps?snapr=primary';
    }

    $('#logcontrol').click(toggleSnapLogs);

    $('#snapstatus').click(function(){
        $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
        if($('#snap-notifyme').is(':checked')) {
            $('#arg2').val('1');
        } else {
            $('#arg2').val('0');
        }
        $('#arg3').val('status');
        if($('#snap-rawreport').val()) {
            $('#arg4').val('-l');
            $('#arg5').val($('#snap-rawreport').val());
        }
        confirmCommandAndSubmit();
    });
    $('#snaplist').click(function(){
        $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
        if($('#snap-notifyme').is(':checked')) {
            $('#arg2').val('1');
        } else {
            $('#arg2').val('0');
        }
        $('#arg3').val('list');
        if($('#snap-rawreport').val()) {
            $('#arg4').val('-l');
            $('#arg5').val($('#snap-rawreport').val());
        }
        confirmCommandAndSubmit();
    });
    $('#snapdiff').click(function(){
        $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
        if($('#snap-notifyme').is(':checked')) {
            $('#arg2').val('1');
        } else {
            $('#arg2').val('0');
        }
        $('#arg3').val('diff');
        if($('#snap-rawreport').val()) {
            $('#arg4').val('-l');
            $('#arg5').val($('#snap-rawreport').val());
        }
        if($('#snapcheck-forceuuid').is(':checked')) {
            $('#arg6').val('-U');
        }
        confirmCommandAndSubmit();
    });
    $('#snapdup').click(function(){
        $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
        if($('#snap-notifyme').is(':checked')) {
            $('#arg2').val('1');
        } else {
            $('#arg2').val('0');
        }
        $('#arg3').val('dup');
        if($('#snap-rawreport').val()) {
            $('#arg4').val('-l');
            $('#arg5').val($('#snap-rawreport').val());
        }
        confirmCommandAndSubmit();
    });
    $('#snapscrub').click(function(){
        $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
        if($('#snap-notifyme').is(':checked')) {
            $('#arg2').val('1');
        } else {
            $('#arg2').val('0');
        }
        $('#arg3').val('scrub');
        if($('#snap-rawreport').val()) {
            $('#arg4').val('-l');
            $('#arg5').val($('#snap-rawreport').val());
        }
        if($('#snapscrub-bad').is(':checked')) {
            $('#arg6').val('-p');
            $('#arg7').val('bad');
        }
        else if($('#snapscrub-new').is(':checked')) {
            $('#arg6').val('-p');
            $('#arg7').val('new');
        }
        else if($('#snapscrub-full').is(':checked')) {
            $('#arg6').val('-p');
            $('#arg7').val('full');
        }
        else if($('#snapscrub-plan').is(':checked')) {
           if($('#snapscrub-percent').val()) {
                $('#arg6').val('-p');
                $('#arg7').val($('#snapscrub-percent').val());
            }
            if($('#snapscrub-age').val()) {
                $('#arg8').val('-o');
                $('#arg9').val($('#snapscrub-age').val());
            }
        }
        if($('#snapsync-errorlimit').val()) {
            $('#arg10').val('-L');
            $('#arg11').val($('#snapsync-errorlimit').val());
        }
        if($('#snap-hideprogress').is(':checked')) {
            $('#arg12').val('-q');
        } else if ($('#snap-verbose').is(':checked')) {
            $('#arg12').val('-v');
        }
        confirmCommandAndSubmit();
    });
    $('#snapcheck').click(function(){
        $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
        if($('#snap-notifyme').is(':checked')) {
            $('#arg2').val('1');
        } else {
            $('#arg2').val('0');
        }
        $('#arg3').val('check');
        if($('#snap-rawreport').val()) {
            $('#arg4').val('-l');
            $('#arg5').val($('#snap-rawreport').val());
        }
        if($('#snapcheck-missing').is(':checked')) {
            $('#arg6').val('-m');
        }
        if($('#snapcheck-errors').is(':checked')) {
            $('#arg7').val('-e');
        }
        if($('#snapcheck-auditonly').is(':checked')) {
            $('#arg8').val('-a');
        }
        if($('#snapfix-diskpattern').val()) {
            $('#arg9').val('-d');
            $('#arg10').val($('#snapfix-diskpattern').val());
        }
        if($('#snapfix-pattern').val()) {
            $('#arg11').val('-f');
            $('#arg12').val($('#snapfix-pattern').val());
        }
        if($('#snapcheck-forceuuid').is(':checked')) {
            $('#arg13').val('-U');
        }
        if($('#snapsync-forcenocopy').is(':checked')) {
            $('#arg14').val('-N');
        }
        if($('#snapfix-blkstart').val()) {
            $('#arg15').val('-S');
            $('#arg16').val($('#snapfix-blkstart').val());
        }
        if($('#snapfix-blkcount').val()) {
            $('#arg17').val('-B');
            $('#arg18').val($('#snapfix-blkcount').val());
        }
        if($('#snap-hideprogress').is(':checked')) {
            $('#arg19').val('-q');
        } else if ($('#snap-verbose').is(':checked')) {
            $('#arg19').val('-v');
        }
        confirmCommandAndSubmit();
    });

    $('#clearoutput').click(function(){
        $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/clearoutput');
        $('#snapcommands').submit();
    });
    $('#clearlogs').click(function(){
        swal({
            title: "Are you sure?",
            text: "This action will delete all of the array's stored logfiles.",
            type: "warning",
            showCancelButton: true,
            confirmButtonText: "Clear All Logs",
            html: true
            },
            function(){
                $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/clearlogs');
                $('#snapcommands').submit();
            });
    });
    $('#fixramdisk').click(function(){
        swal({
            title: "Are you sure?",
            text: "SnapRAID's RAM disk will be recreated on the system.<br>This action will also delete all arrays stored logfiles.",
            type: "error",
            showCancelButton: true,
            confirmButtonText: "Recreate Disk",
            html: true
            },
            function(){
                $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/fixramdisk');
                $('#snapcommands').submit();
            });
    });
    $('#clearlogs2').click(function(){
        swal({
            title: "Are you sure?",
            text: "This action will delete all arrays stored logfiles.",
            type: "error",
            showCancelButton: true,
            confirmButtonText: "Clear All Logs",
            html: true
            },
            function(){
                $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/clearlogs_all');
                $('#snapcommands').submit();
            });
    });
    $('#snapstop').click(function(){
        swal({
            title: "Are you sure?",
            text: "This action will stop the array's running SnapRAID instances.<br>This includes gracefully interrupting any running array operations.",
            type: "warning",
            showCancelButton: true,
            confirmButtonText: "Stop Operation",
            html: true
            },
            function(){
                $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/stop');
                $('#snapcommands').submit();
            });
    });
    $('#snapkill').click(function(){
        swal({
            title: "Are you sure?",
            text: "This action will kill the array's running SnapRAID instances.<br>Be advised <u>data corruption</u> can be a result of this action.",
            type: "error",
            showCancelButton: true,
            confirmButtonText: "Kill Operation",
            html: true
            },
            function(){
                $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/kill');
                $('#snapcommands').submit();
            });
    });

    $('#snapsync').click(function(){
        swal({
            title: "Destructive Operation",
            text: "This is a <u>potentially destructive</u> array operation. That means it will change either your parity, your protected files or both. Please make sure you consulted the <a href='https://www.snapraid.it/manual' target='_blank'>SnapRAID manual</a> and <u>fully understand what you are about to do</u> before proceeding with this operation.<br><br>Updates the parity information. All the modified files in the disk array are read, and the corresponding parity data is updated.<br><br>Takes a snapshot, the base for all recoveries.",
            type: "warning",
            showCancelButton: true,
            confirmButtonText: "Start Operation",
            closeOnConfirm: false,
            html: true
            },
            function(){
                $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
                if($('#snap-notifyme').is(':checked')) {
                    $('#arg2').val('1');
                } else {
                    $('#arg2').val('0');
                }
                $('#arg3').val('sync');
                if($('#snap-rawreport').val()) {
                    $('#arg4').val('-l');
                    $('#arg5').val($('#snap-rawreport').val());
                }
                if($('#snapsync-forcezero').is(':checked')) {
                    $('#arg6').val('-Z');
                }
                if($('#snapsync-forceempty').is(':checked')) {
                    $('#arg7').val('-E');
                }
                if($('#snapsync-forcefull').is(':checked')) {
                    $('#arg8').val('-F');
                }
                if($('#snapsync-forcerealloc').is(':checked')) {
                    $('#arg9').val('-R');
                }
                if($('#snapcheck-forceuuid').is(':checked')) {
                    $('#arg10').val('-U');
                }
                if($('#snapsync-forcenocopy').is(':checked')) {
                    $('#arg11').val('-N');
                }
                if($('#snapsync-errorlimit').val()) {
                    $('#arg12').val('-L');
                    $('#arg13').val($('#snapsync-errorlimit').val());
                }
                if($('#snap-hideprogress').is(':checked')) {
                    $('#arg14').val('-q');
                } else if ($('#snap-verbose').is(':checked')) {
                    $('#arg14').val('-v');
                }
                confirmCommandAndSubmit();
            });
    });  
    $('#snaphashedsync').click(function(){
        swal({
            title: "Destructive Operation",
            text: "This is a <u>potentially destructive</u> array operation. That means it will change either your parity, your protected files or both. Please make sure you consulted the <a href='https://www.snapraid.it/manual' target='_blank'>SnapRAID manual</a> and <u>fully understand what you are about to do</u> before proceeding with this operation.<br><br>Updates the parity information. All the modified files in the disk array are read, and the corresponding parity data is updated.<br><br>Takes a snapshot, the base for all recoveries.<br><br>A preliminary hashing phase of all the new data, to have an additional verification before the actual parity computation, is performed.",
            type: "warning",
            showCancelButton: true,
            confirmButtonText: "Start Operation",
            closeOnConfirm: false,
            html: true
            },
            function(){
                $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
                if($('#snap-notifyme').is(':checked')) {
                    $('#arg2').val('1');
                } else {
                    $('#arg2').val('0');
                }
                $('#arg3').val('sync');
                $('#arg4').val('-h');
                if($('#snap-rawreport').val()) {
                    $('#arg5').val('-l');
                    $('#arg6').val($('#snap-rawreport').val());
                }
                if($('#snapsync-forcezero').is(':checked')) {
                    $('#arg7').val('-Z');
                }
                if($('#snapsync-forceempty').is(':checked')) {
                    $('#arg8').val('-E');
                }
                if($('#snapsync-forcefull').is(':checked')) {
                    $('#arg9').val('-F');
                }
                if($('#snapsync-forcerealloc').is(':checked')) {
                    $('#arg10').val('-R');
                }
                if($('#snapcheck-forceuuid').is(':checked')) {
                    $('#arg11').val('-U');
                }
                if($('#snapsync-forcenocopy').is(':checked')) {
                    $('#arg12').val('-N');
                }
                if($('#snapsync-errorlimit').val()) {
                    $('#arg13').val('-L');
                    $('#arg14').val($('#snapsync-errorlimit').val());
                }
                if($('#snap-hideprogress').is(':checked')) {
                    $('#arg15').val('-q');
                } else if ($('#snap-verbose').is(':checked')) {
                    $('#arg15').val('-v');
                }
                confirmCommandAndSubmit();
            });
    });
    $('#snaptouch').click(function(){
        swal({
            title: "Destructive Operation",
            text: "This is a <u>potentially destructive</u> array operation. That means it will change either your parity, your protected files or both. Please make sure you consulted the <a href='https://www.snapraid.it/manual' target='_blank'>SnapRAID manual</a> and <u>fully understand what you are about to do</u> before proceeding with this operation.<br><br>Sets arbitrarily the sub-second time-stamp of all the files that have it at zero. This improves the SnapRAID capability to recognize moved and copied files as it makes the time-stamp almost unique.",
            type: "warning",
            showCancelButton: true,
            confirmButtonText: "Start Operation",
            closeOnConfirm: false,
            html: true
            },
            function(){
                $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
                if($('#snap-notifyme').is(':checked')) {
                    $('#arg2').val('1');
                } else {
                    $('#arg2').val('0');
                }
                $('#arg3').val('touch');
                if($('#snap-rawreport').val()) {
                    $('#arg4').val('-l');
                    $('#arg5').val($('#snap-rawreport').val());
                }
                confirmCommandAndSubmit();
            });
    });
    $('#snapfix').click(function(){
        swal({
            title: "Destructive Operation",
            text: "This is a <u>potentially destructive</u> array operation. That means it will change either your parity, your protected files or both. Please make sure you consulted the <a href='https://www.snapraid.it/manual' target='_blank'>SnapRAID manual</a> and <u>fully understand what you are about to do</u> before proceeding with this operation.<br><br>Fix all the files and the parity data. All the files and the parity data are compared with the snapshot state saved in the last SYNC. If a difference is found, it's reverted to the stored snapshot. This command doesn't differentiate between errors and intentional modifications. It unconditionally reverts the file state to the last SYNC.<br><br>If no other option is specified, the full array is processed. Use the filter options to select a subset of files or disks to operate on.",
            type: "warning",
            showCancelButton: true,
            confirmButtonText: "Start Operation",
            closeOnConfirm: false,
            html: true
            },
            function(){
                $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
                if($('#snap-notifyme').is(':checked')) {
                    $('#arg2').val('1');
                } else {
                    $('#arg2').val('0');
                }
                $('#arg3').val('fix');
                if($('#snap-rawreport').val()) {
                    $('#arg4').val('-l');
                    $('#arg5').val($('#snap-rawreport').val());
                }
                if($('#snapfix-diskpattern').val()) {
                    $('#arg6').val('-d');
                    $('#arg7').val($('#snapfix-diskpattern').val());
                }
                if($('#snapfix-pattern').val()) {
                    $('#arg8').val('-f');
                    $('#arg9').val($('#snapfix-pattern').val());
                }
                if($('#snapcheck-forceuuid').is(':checked')) {
                    $('#arg10').val('-U');
                }
                if($('#snapfix-forcedevice').is(':checked')) {
                    $('#arg11').val('-D');
                }
                if($('#snapsync-forcenocopy').is(':checked')) {
                    $('#arg12').val('-N');
                }
                if($('#snapfix-blkstart').val()) {
                    $('#arg13').val('-S');
                    $('#arg14').val($('#snapfix-blkstart').val());
                }
                if($('#snapfix-blkcount').val()) {
                    $('#arg15').val('-B');
                    $('#arg16').val($('#snapfix-blkcount').val());
                }
                if($('#snap-hideprogress').is(':checked')) {
                    $('#arg17').val('-q');
                } else if ($('#snap-verbose').is(':checked')) {
                    $('#arg17').val('-v');
                }
                confirmCommandAndSubmit();
            });
    });
    $('#snapfixmissing').click(function(){
        swal({
            title: "Destructive Operation",
            text: "This is a <u>potentially destructive</u> array operation. That means it will change either your parity, your protected files or both. Please make sure you consulted the <a href='https://www.snapraid.it/manual' target='_blank'>SnapRAID manual</a> and <u>fully understand what you are about to do</u> before proceeding with this operation.<br><br>Fix all the files and the parity data. All the files and the parity data are compared with the snapshot state saved in the last SYNC. If a difference is found, it's reverted to the stored snapshot. This command doesn't differentiate between errors and intentional modifications. It unconditionally reverts the file state to the last SYNC.<br><br>Only all files missing/deleted from the array are processed.",
            type: "warning",
            showCancelButton: true,
            confirmButtonText: "Start Operation",
            closeOnConfirm: false,
            html: true
            },
            function(){
                $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
                if($('#snap-notifyme').is(':checked')) {
                    $('#arg2').val('1');
                } else {
                    $('#arg2').val('0');
                }
                $('#arg3').val('fix');
                $('#arg4').val('-m');
                if($('#snap-rawreport').val()) {
                    $('#arg5').val('-l');
                    $('#arg6').val($('#snap-rawreport').val());
                }
                if($('#snapfix-diskpattern').val()) {
                    $('#arg7').val('-d');
                    $('#arg8').val($('#snapfix-diskpattern').val());
                }
                if($('#snapfix-pattern').val()) {
                    $('#arg9').val('-f');
                    $('#arg10').val($('#snapfix-pattern').val());
                }
                if($('#snapcheck-forceuuid').is(':checked')) {
                    $('#arg11').val('-U');
                }
                if($('#snapfix-forcedevice').is(':checked')) {
                    $('#arg12').val('-D');
                }
                if($('#snapsync-forcenocopy').is(':checked')) {
                    $('#arg13').val('-N');
                }
                if($('#snapfix-blkstart').val()) {
                    $('#arg14').val('-S');
                    $('#arg15').val($('#snapfix-blkstart').val());
                }
                if($('#snapfix-blkcount').val()) {
                    $('#arg16').val('-B');
                    $('#arg17').val($('#snapfix-blkcount').val());
                }
                if($('#snap-hideprogress').is(':checked')) {
                    $('#arg18').val('-q');
                } else if ($('#snap-verbose').is(':checked')) {
                    $('#arg18').val('-v');
                }
                confirmCommandAndSubmit();
            });
    });
    $('#snapfixerrors').click(function(){
        swal({
            title: "Destructive Operation",
            text: "This is a <u>potentially destructive</u> array operation. That means it will change either your parity, your protected files or both. Please make sure you consulted the <a href='https://www.snapraid.it/manual' target='_blank'>SnapRAID manual</a> and <u>fully understand what you are about to do</u> before proceeding with this operation.<br><br>Fix all the files and the parity data. All the files and the parity data are compared with the snapshot state saved in the last SYNC. If a difference is found, it's reverted to the stored snapshot. This command doesn't differentiate between errors and intentional modifications. It unconditionally reverts the file state to the last SYNC.<br><br>Only files that have blocks marked with silent or input/output errors during previous SYNC and SCRUB operations are processed.",
            type: "warning",
            showCancelButton: true,
            confirmButtonText: "Start Operation",
            closeOnConfirm: false,
            html: true
            },
            function(){
                $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
                if($('#snap-notifyme').is(':checked')) {
                    $('#arg2').val('1');
                } else {
                    $('#arg2').val('0');
                }
                $('#arg3').val('fix');
                $('#arg4').val('-e');
                if($('#snap-rawreport').val()) {
                    $('#arg5').val('-l');
                    $('#arg6').val($('#snap-rawreport').val());
                }
                if($('#snapfix-diskpattern').val()) {
                    $('#arg7').val('-d');
                    $('#arg8').val($('#snapfix-diskpattern').val());
                }
                if($('#snapfix-pattern').val()) {
                    $('#arg9').val('-f');
                    $('#arg10').val($('#snapfix-pattern').val());
                }
                if($('#snapcheck-forceuuid').is(':checked')) {
                    $('#arg11').val('-U');
                }
                if($('#snapfix-forcedevice').is(':checked')) {
                    $('#arg12').val('-D');
                }
                if($('#snapsync-forcenocopy').is(':checked')) {
                    $('#arg13').val('-N');
                }
                if($('#snapfix-blkstart').val()) {
                    $('#arg14').val('-S');
                    $('#arg15').val($('#snapfix-blkstart').val());
                }
                if($('#snapfix-blkcount').val()) {
                    $('#arg16').val('-B');
                    $('#arg17').val($('#snapfix-blkcount').val());
                }
                if($('#snap-hideprogress').is(':checked')) {
                    $('#arg18').val('-q');
                } else if ($('#snap-verbose').is(':checked')) {
                    $('#arg18').val('-v');
                }
                confirmCommandAndSubmit();
            });
    });
    $('#crontest').click(function(){
        swal({
            title: "Are you sure?",
            text: "This array maintenance is not simulated.<br>It will really run as configured for the array.",
            type: "warning",
            showCancelButton: true,
            confirmButtonText: "Start Operation",
            html: true
            },
            function(){
                $('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/crontest');
                $('#snapcommands').submit();
            });
    });

    <?
    if(!empty($dwsnap_active_cfg->parity_disks) || !empty($dwsnap_active_cfg->data_disks)) {
        foreach ($dwsnap_active_cfg->parity_disks as $snap_parity_disk) {
            $snap_parity_name = htmlspecialchars($snap_parity_disk[1]);
            echo <<<END
            \$('#$snap_parity_name-check').click(function() {
                \$('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
                if(\$('#snap-notifyme').is(':checked')) {
                    \$('#arg2').val('1');
                } else {
                    \$('#arg2').val('0');
                }
                \$('#arg3').val('check');
                \$('#arg4').val('-d');
                \$('#arg5').val('$snap_parity_name');
                if(\$('#snap-rawreport').val()) {
                    \$('#arg6').val('-l');
                    \$('#arg7').val(\$('#snap-rawreport').val());
                }
                if (\$('#snapcheck-auditonly').is(':checked')) {
                    \$('#arg8').val('-a');
                }
                if (\$('#snapfix-pattern').val()) {
                    \$('#arg9').val('-f');
                    \$('#arg10').val(\$('#snapfix-pattern').val());
                }
                if (\$('#snapcheck-forceuuid').is(':checked')) {
                    \$('#arg11').val('-U');
                }
                if (\$('#snapsync-forcenocopy').is(':checked')) {
                    \$('#arg12').val('-N');
                }
                if (\$('#snapfix-blkstart').val()) {
                    \$('#arg13').val('-S');
                    \$('#arg14').val(\$('#snapfix-blkstart').val());
                }
                if (\$('#snapfix-blkcount').val()) {
                    \$('#arg15').val('-B');
                    \$('#arg16').val(\$('#snapfix-blkcount').val());
                }
                if (\$('#snap-hideprogress').is(':checked')) {
                    \$('#arg17').val('-q');
                } else if (\$('#snap-verbose').is(':checked')) {
                    \$('#arg17').val('-v');
                }
                confirmCommandAndSubmit();
            });
            \$('#$snap_parity_name-fix').click(function() {
                swal({
                    title: "Destructive Operation",
                    text: "This is a <u>potentially destructive</u> array operation. That means it will change either your parity, your protected files or both. Please make sure you consulted the <a href='https://www.snapraid.it/manual' target='_blank'>SnapRAID manual</a> and <u>fully understand what you are about to do</u> before proceeding with this operation.<br><br>Fix all the files and the parity data. All the files and the parity data are compared with the snapshot state saved in the last SYNC. If a difference is found, it's reverted to the stored snapshot. This command doesn't differentiate between errors and intentional modifications. It unconditionally reverts the file state to the last SYNC.<br><br>This command only processes the selected disk.",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Start Operation",
                    closeOnConfirm: false,
                    html: true
                }, function() {
                    \$('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
                    if(\$('#snap-notifyme').is(':checked')) {
                        \$('#arg2').val('1');
                    } else {
                        \$('#arg2').val('0');
                    }
                    \$('#arg3').val('fix');
                    \$('#arg4').val('-d');
                    \$('#arg5').val('$snap_parity_name');
                    if(\$('#snap-rawreport').val()) {
                        \$('#arg6').val('-l');
                        \$('#arg7').val(\$('#snap-rawreport').val());
                    }
                    if (\$('#snapfix-pattern').val()) {
                        \$('#arg8').val('-f');
                        \$('#arg9').val(\$('#snapfix-pattern').val());
                    }
                    if (\$('#snapcheck-forceuuid').is(':checked')) {
                        \$('#arg10').val('-U');
                    }
                    if (\$('#snapfix-forcedevice').is(':checked')) {
                        \$('#arg11').val('-D');
                    }
                    if (\$('#snapsync-forcenocopy').is(':checked')) {
                        \$('#arg12').val('-N');
                    }
                    if (\$('#snapfix-blkstart').val()) {
                        \$('#arg13').val('-S');
                        \$('#arg14').val(\$('#snapfix-blkstart').val());
                    }
                    if (\$('#snapfix-blkcount').val()) {
                        \$('#arg15').val('-B');
                        \$('#arg16').val(\$('#snapfix-blkcount').val());
                    }
                    if (\$('#snap-hideprogress').is(':checked')) {
                        \$('#arg17').val('-q');
                    } else if (\$('#snap-verbose').is(':checked')) {
                        \$('#arg17').val('-v');
                    }
                    confirmCommandAndSubmit();
                });
            });
            \$('#$snap_parity_name-fixmissing').click(function() {
                swal({
                    title: "Destructive Operation",
                    text: "This is a <u>potentially destructive</u> array operation. That means it will change either your parity, your protected files or both. Please make sure you consulted the <a href='https://www.snapraid.it/manual' target='_blank'>SnapRAID manual</a> and <u>fully understand what you are about to do</u> before proceeding with this operation.<br><br>Fix all the files and the parity data. All the files and the parity data are compared with the snapshot state saved in the last SYNC. If a difference is found, it's reverted to the stored snapshot. This command doesn't differentiate between errors and intentional modifications. It unconditionally reverts the file state to the last SYNC.<br><br>Only processes missing or deleted files on the selected disk.",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Start Operation",
                    closeOnConfirm: false,
                    html: true
                }, function() {
                    \$('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
                    if(\$('#snap-notifyme').is(':checked')) {
                        \$('#arg2').val('1');
                    } else {
                        \$('#arg2').val('0');
                    }
                    \$('#arg3').val('fix');
                    \$('#arg4').val('-m');
                    \$('#arg5').val('-d');
                    \$('#arg6').val('$snap_parity_name');
                    if(\$('#snap-rawreport').val()) {
                        \$('#arg7').val('-l');
                        \$('#arg8').val(\$('#snap-rawreport').val());
                    }
                    if (\$('#snapfix-pattern').val()) {
                        \$('#arg9').val('-f');
                        \$('#arg10').val(\$('#snapfix-pattern').val());
                    }
                    if (\$('#snapcheck-forceuuid').is(':checked')) {
                        \$('#arg11').val('-U');
                    }
                    if (\$('#snapfix-forcedevice').is(':checked')) {
                        \$('#arg12').val('-D');
                    }
                    if (\$('#snapsync-forcenocopy').is(':checked')) {
                        \$('#arg13').val('-N');
                    }
                    if (\$('#snapfix-blkstart').val()) {
                        \$('#arg14').val('-S');
                        \$('#arg15').val(\$('#snapfix-blkstart').val());
                    }
                    if (\$('#snapfix-blkcount').val()) {
                        \$('#arg16').val('-B');
                        \$('#arg17').val(\$('#snapfix-blkcount').val());
                    }
                    if (\$('#snap-hideprogress').is(':checked')) {
                        \$('#arg18').val('-q');
                    } else if (\$('#snap-verbose').is(':checked')) {
                        \$('#arg18').val('-v');
                    }
                    confirmCommandAndSubmit();
                });
            });
END;
        }
        foreach ($dwsnap_active_cfg->data_disks as $snap_data_disk) {
            $snap_data_name = htmlspecialchars($snap_data_disk[1]);
            echo <<<END
            \$('#$snap_data_name-check').click(function() {
                \$('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
                if(\$('#snap-notifyme').is(':checked')) {
                    \$('#arg2').val('1');
                } else {
                    \$('#arg2').val('0');
                }
                \$('#arg3').val('check');
                \$('#arg4').val('-d');
                \$('#arg5').val('$snap_data_name');
                if(\$('#snap-rawreport').val()) {
                    \$('#arg6').val('-l');
                    \$('#arg7').val(\$('#snap-rawreport').val());
                }
                if (\$('#snapcheck-auditonly').is(':checked')) {
                    \$('#arg8').val('-a');
                }
                if (\$('#snapfix-pattern').val()) {
                    \$('#arg9').val('-f');
                    \$('#arg10').val(\$('#snapfix-pattern').val());
                }
                if (\$('#snapcheck-forceuuid').is(':checked')) {
                    \$('#arg11').val('-U');
                }
                if (\$('#snapsync-forcenocopy').is(':checked')) {
                    \$('#arg12').val('-N');
                }
                if (\$('#snapfix-blkstart').val()) {
                    \$('#arg13').val('-S');
                    \$('#arg14').val(\$('#snapfix-blkstart').val());
                }
                if (\$('#snapfix-blkcount').val()) {
                    \$('#arg15').val('-B');
                    \$('#arg16').val(\$('#snapfix-blkcount').val());
                }
                if (\$('#snap-hideprogress').is(':checked')) {
                    \$('#arg17').val('-q');
                } else if (\$('#snap-verbose').is(':checked')) {
                    \$('#arg17').val('-v');
                }
                confirmCommandAndSubmit();
            });
            \$('#$snap_data_name-fix').click(function() {
                swal({
                    title: "Destructive Operation",
                    text: "This is a <u>potentially destructive</u> array operation. That means it will change either your parity, your protected files or both. Please make sure you consulted the <a href='https://www.snapraid.it/manual' target='_blank'>SnapRAID manual</a> and <u>fully understand what you are about to do</u> before proceeding with this operation.<br><br>Fix all the files and the parity data. All the files and the parity data are compared with the snapshot state saved in the last SYNC. If a difference is found, it's reverted to the stored snapshot. This command doesn't differentiate between errors and intentional modifications. It unconditionally reverts the file state to the last SYNC.<br><br>This command only processes the selected disk.",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Start Operation",
                    closeOnConfirm: false,
                    html: true
                }, function() {
                    \$('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
                    if(\$('#snap-notifyme').is(':checked')) {
                        \$('#arg2').val('1');
                    } else {
                        \$('#arg2').val('0');
                    }
                    \$('#arg3').val('fix');
                    \$('#arg4').val('-d');
                    \$('#arg5').val('$snap_data_name');
                    if(\$('#snap-rawreport').val()) {
                        \$('#arg6').val('-l');
                        \$('#arg7').val(\$('#snap-rawreport').val());
                    }
                    if (\$('#snapfix-pattern').val()) {
                        \$('#arg8').val('-f');
                        \$('#arg9').val(\$('#snapfix-pattern').val());
                    }
                    if (\$('#snapcheck-forceuuid').is(':checked')) {
                        \$('#arg10').val('-U');
                    }
                    if (\$('#snapfix-forcedevice').is(':checked')) {
                        \$('#arg11').val('-D');
                    }
                    if (\$('#snapsync-forcenocopy').is(':checked')) {
                        \$('#arg12').val('-N');
                    }
                    if (\$('#snapfix-blkstart').val()) {
                        \$('#arg13').val('-S');
                        \$('#arg14').val(\$('#snapfix-blkstart').val());
                    }
                    if (\$('#snapfix-blkcount').val()) {
                        \$('#arg15').val('-B');
                        \$('#arg16').val(\$('#snapfix-blkcount').val());
                    }
                    if (\$('#snap-hideprogress').is(':checked')) {
                        \$('#arg17').val('-q');
                    } else if (\$('#snap-verbose').is(':checked')) {
                        \$('#arg17').val('-v');
                    }
                    confirmCommandAndSubmit();
                });
            });
            \$('#$snap_data_name-fixmissing').click(function() {
                swal({
                    title: "Destructive Operation",
                    text: "This is a <u>potentially destructive</u> array operation. That means it will change either your parity, your protected files or both. Please make sure you consulted the <a href='https://www.snapraid.it/manual' target='_blank'>SnapRAID manual</a> and <u>fully understand what you are about to do</u> before proceeding with this operation.<br><br>Fix all the files and the parity data. All the files and the parity data are compared with the snapshot state saved in the last SYNC. If a difference is found, it's reverted to the stored snapshot. This command doesn't differentiate between errors and intentional modifications. It unconditionally reverts the file state to the last SYNC.<br><br>Only processes missing or deleted files on the selected disk.",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Start Operation",
                    closeOnConfirm: false,
                    html: true
                }, function() {
                    \$('#command').val('/usr/local/emhttp/plugins/dwsnap/scripts/start');
                    if(\$('#snap-notifyme').is(':checked')) {
                        \$('#arg2').val('1');
                    } else {
                        \$('#arg2').val('0');
                    }
                    \$('#arg3').val('fix');
                    \$('#arg4').val('-m');
                    \$('#arg5').val('-d');
                    \$('#arg6').val('$snap_data_name');
                    if(\$('#snap-rawreport').val()) {
                        \$('#arg7').val('-l');
                        \$('#arg8').val(\$('#snap-rawreport').val());
                    }
                    if (\$('#snapfix-pattern').val()) {
                        \$('#arg9').val('-f');
                        \$('#arg10').val(\$('#snapfix-pattern').val());
                    }
                    if (\$('#snapcheck-forceuuid').is(':checked')) {
                        \$('#arg11').val('-U');
                    }
                    if (\$('#snapfix-forcedevice').is(':checked')) {
                        \$('#arg12').val('-D');
                    }
                    if (\$('#snapsync-forcenocopy').is(':checked')) {
                        \$('#arg13').val('-N');
                    }
                    if (\$('#snapfix-blkstart').val()) {
                        \$('#arg14').val('-S');
                        \$('#arg15').val(\$('#snapfix-blkstart').val());
                    }
                    if (\$('#snapfix-blkcount').val()) {
                        \$('#arg16').val('-B');
                        \$('#arg17').val(\$('#snapfix-blkcount').val());
                    }
                    if (\$('#snap-hideprogress').is(':checked')) {
                        \$('#arg18').val('-q');
                    } else if (\$('#snap-verbose').is(':checked')) {
                        \$('#arg18').val('-v');
                    }
                    confirmCommandAndSubmit();
                });
            });
END;
        }
    }
    ?>

    getSnapStatus()
    getSnapLogs();
    
    $('.snaphelptip').tooltipster({
        maxWidth: 300
    });

    if ($.cookie('dwsnapwarning')===undefined) {
        swal({
            title: "Plugin Disclaimer",
            text: "Be advised that this plugin is in active development and targeted towards advanced users with a solid understanding of Linux systems.<br><br>If you do not know what a mount point is, are not comfortable with using a command line or unable to come up yourself with solutions for any self-induced OS-related problems, please do not use this plugin.<br><br>Understand that no software is perfect and that software of this nature in particular <u>should only ever be used on backed up data</u> and in combination with a solid backup strategy. Parity is not a backup.<br><br>While this software has been tested with the utmost diligence, its authors cannot be held responsible for any incurred data losses.",
            type: "warning",
            confirmButtonText: "Proceed",
            showCancelButton: true,
            cancelButtonText: "Go Back",
            html: true
            },
            function(isConfirmed){
                if(isConfirmed) {
                    $.cookie('dwsnapwarning', 'seen', { expires: 3650 });
                } else {
                    location = '/Settings';
                }
            });
    }

    $('div.title:contains(SnapRAID):first').append('<span class="right">OPERATING ON: <strong><?=strtoupper($dwsnap_active_cfg->cfgname);?></strong></span>');

    // dynamix plugin update api
    <?if (function_exists('plugin_update_available') && $version = plugin_update_available('dwsnap')):?>
        showNotice('SnapRAID <?=htmlspecialchars($version);?> available. <a>Update</a>','dwsnap');
        $('#user-notice a').on('click', function () {
        $('#user-notice').empty();
    });
    <?endif;?>
});
</script>
