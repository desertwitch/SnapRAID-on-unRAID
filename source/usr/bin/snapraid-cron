#!/bin/bash
#
# Copyright Derek Macias (parts of code from NUT package)
# Copyright macester (parts of code from NUT package)
# Copyright gfjardim (parts of code from NUT package)
# Copyright SimonF (parts of code from NUT package)
# Copyright Oliver Cervera (parts of code from snapraid-aio-script)
# Copyright desertwitch
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 2
# as published by the Free Software Foundation.
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
umask 000
SNAP_BIN="/usr/bin/snapraid"
SNAP_CONF="/etc/snapraid.conf"
CONFIG="/boot/config/plugins/dwsnap/dwsnap.cfg"

RUNNINGOP="INIT"

[ ! -d /var/lib/snapraid/logs ] && mkdir -p /var/lib/snapraid/logs

[ -e "$CONFIG" ] && source $CONFIG

if [ "$CRON" != "hourly" ] && [ "$CRON" != "daily" ] && [ "$CRON" != "weekly" ] && [ "$CRON" != "monthly" ]; then
    echo "### SnapRAID maintenance not enabled in settings, exiting..." | logger -s -t "snapraid-cron"
    exit 1
fi

if pgrep -x snapraid >/dev/null 2>&1 || pgrep -x snapraid-runner >/dev/null 2>&1; then
    echo "SnapRAID is already running somewhere, exiting..." | logger -s -t "snapraid-cron"
    exit 1
fi

NOTIFY_BIN="/usr/local/emhttp/plugins/dynamix/scripts/notify"
HOST="$(echo "$HOSTNAME" | awk '{print toupper($0)}')"
EVENT="SnapRAID Operation"
SUBJECT="[${HOST}] SnapRAID"

[ "$PRIO" == "idle" ] && SNAP_BIN="ionice -c 3 /usr/bin/snapraid"
[ "$PRIO" == "besteffort" ] && SNAP_BIN="ionice -c 2 /usr/bin/snapraid"
[ "$PRIO" == "realtime" ] && SNAP_BIN="ionice -c 1 /usr/bin/snapraid"

failure_exit_cron() {
    RUNNINGOP="FINALIZE"
    OPTIME=$(date +"%d.%m.%Y %H:%M:%S %Z")
    MEASURESTOP=$(date +%s)
    DURATION=$((MEASURESTOP-MEASURESTART))
    DURATIONUNIT="seconds"
    [ "$DURATION" -ge 60 ] && DURATION=$((DURATION/60)) && DURATIONUNIT="minutes"
    [ "$DURATION" -ge 60 ] && DURATION=$((DURATION/60)) && DURATIONUNIT="hours"
    echo "$OPTIME" >/var/lib/snapraid/logs/lastfinish
    echo "################################################################" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
    echo "### CRON -- FINISHED: ${OPTIME} (after ${DURATION} ${DURATIONUNIT})" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
    [ -n "$RAMWARNING" ] && echo "### CRON --${RAMWARNING}" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
    cp /var/lib/snapraid/logs/snaplog "/var/lib/snapraid/logs/cron-${LOGTIME}.log"
    if [ -z "${SUCCESSOPS[*]}" ]; then
        if [ "$FINISHNOTIFY" == "enable" ] || [ "$ERRORNOTIFY" == "enable" ]; then
            $NOTIFY_BIN -e "${EVENT}" -s "Alert ${SUBJECT} Maintenance Failure" -d "SnapRAID maintenance finished with errors (after ${DURATION} ${DURATIONUNIT}). No operations performed without errors. ${FAILUREMSG}${RAMWARNINGSHORT}" -i "alert"
        fi
    else
        if [ "$FINISHNOTIFY" == "enable" ] || [ "$ERRORNOTIFY" == "enable" ]; then
            $NOTIFY_BIN -e "${EVENT}" -s "Alert ${SUBJECT} Maintenance Failure" -d "SnapRAID maintenance finished with errors (after ${DURATION} ${DURATIONUNIT}). ${SUCCESSOPS[*]} performed without errors. ${FAILUREMSG}${RAMWARNINGSHORT}" -i "alert"
        fi
    fi
    exit 1
}

# shellcheck disable=SC2317
signal_exit_cron() {
    FAILUREMSG="SIGTERM was received during ${RUNNINGOP}."
    OPTIME=$(date +"%d.%m.%Y %H:%M:%S %Z")
    MEASURESTOP=$(date +%s)
    DURATION=$((MEASURESTOP-MEASURESTART))
    DURATIONUNIT="seconds"
    [ "$DURATION" -ge 60 ] && DURATION=$((DURATION/60)) && DURATIONUNIT="minutes"
    [ "$DURATION" -ge 60 ] && DURATION=$((DURATION/60)) && DURATIONUNIT="hours"
    echo "$OPTIME" >/var/lib/snapraid/logs/lastfinish
    echo "################################################################" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
    echo "### CRON -- INTERRUPTED [SIGTERM during ${RUNNINGOP}]: ${OPTIME} (after ${DURATION} ${DURATIONUNIT})" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
    [ -n "$RAMWARNING" ] && echo "### CRON --${RAMWARNING}" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
    cp /var/lib/snapraid/logs/snaplog "/var/lib/snapraid/logs/cron-${LOGTIME}.log"
    if [ -z "${SUCCESSOPS[*]}" ]; then
        if [ "$FINISHNOTIFY" == "enable" ] || [ "$ERRORNOTIFY" == "enable" ]; then
            $NOTIFY_BIN -e "${EVENT}" -s "Alert ${SUBJECT} Maintenance Interrupted" -d "SnapRAID maintenance was interrupted during ${RUNNINGOP} (after ${DURATION} ${DURATIONUNIT}). No operations performed without errors. ${FAILUREMSG}${RAMWARNINGSHORT}" -i "alert"
        fi
    else
        if [ "$FINISHNOTIFY" == "enable" ] || [ "$ERRORNOTIFY" == "enable" ]; then
            $NOTIFY_BIN -e "${EVENT}" -s "Alert ${SUBJECT} Maintenance Interrupted" -d "SnapRAID maintenance was interrupted during ${RUNNINGOP} (after ${DURATION} ${DURATIONUNIT}). ${SUCCESSOPS[*]} performed without errors. ${FAILUREMSG}${RAMWARNINGSHORT}" -i "alert"
        fi
    fi
    exit 1
}

RUNNINGOP="START"
SUCCESSOPS=()

rm -f /var/lib/snapraid/logs/lastfinish

LOGTIME=$(date +"%Y%m%d-%H%M%S")
OPTIME=$(date +"%d.%m.%Y %H:%M:%S %Z")
MEASURESTART=$(date +%s)

mkdir -p "/var/lib/snapraid/logs/cron-${LOGTIME}"

echo "$OPTIME" >/var/lib/snapraid/logs/laststart
echo "### CRON -- STARTED: ${OPTIME}" 2>&1 | tee /var/lib/snapraid/logs/snaplog

RAMUTIL=$(df --output=pcent /var/lib/snapraid | tr -dc '0-9')
if [ "$RAMUTIL" -gt 90 ]; then
    RAMWARNING=" RAM disk utilization above 90% - clear the log files to avoid future problems!"
    RAMWARNINGSHORT=" RAM disk utilization above 90%."
    echo "### CRON --${RAMWARNING}" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
fi

echo "################################################################" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog

trap signal_exit_cron SIGTERM SIGINT

[ "$STARTNOTIFY" == "enable" ] && $NOTIFY_BIN -e "${EVENT}" -s "Notice ${SUBJECT} Maintenance Started" -d "The SnapRAID maintenance has started.${RAMWARNINGSHORT}" -i "warning"

[ "$NOPROGRESS" == "enable" ] && QUIETARG="-q"

if [ "$TOUCH" == "enable" ]; then
    RUNNINGOP="TOUCH"
    echo "### CRON -- Checking for files to be touched..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
    TIMESTATUS=$($SNAP_BIN -c $SNAP_CONF -l "/var/lib/snapraid/logs/cron-${LOGTIME}/01a-status-${LOGTIME}.log" status 2>&1 | tee -a /var/lib/snapraid/logs/snaplog | grep -E 'You have [1-9][0-9]* files with( a)? zero sub-second timestamp\.')
    if [ -n "$TIMESTATUS" ]; then
        echo "### CRON -- Touching selected files..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
        if ! $SNAP_BIN -c $SNAP_CONF -l "/var/lib/snapraid/logs/cron-${LOGTIME}/01b-touch-${LOGTIME}.log" $QUIETARG touch >>/var/lib/snapraid/logs/snaplog 2>&1; then
            echo "### CRON -- Touching selected files has failed... exiting" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
            FAILUREMSG="The touching of selected files has failed - check LOG."
            failure_exit_cron
        fi
        echo "### CRON -- Touch has finished, proceeding..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog    
    else
        echo "### CRON -- No files to be touched, proceeding..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
    fi
    SUCCESSOPS+=("TOUCH")
else
    echo "### CRON -- Checking for files to be touched is disabled, proceeding..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
fi

echo "################################################################" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog

if [ "$DIFF" == "enable" ]; then
    RUNNINGOP="DIFF"
    echo "### CRON -- Checking for differences..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
    
    DIFFS=$($SNAP_BIN -c $SNAP_CONF -l "/var/lib/snapraid/logs/cron-${LOGTIME}/02-diff-${LOGTIME}.log" diff 2>&1 | tee -a /var/lib/snapraid/logs/snaplog ; exit "${PIPESTATUS[0]}")
    DIFFRET=$?
    if [ "$DIFFRET" -eq 0 ]; then
        OPTIME=$(date +"%d.%m.%Y %H:%M:%S %Z")
        echo "$OPTIME" >/boot/config/plugins/dwsnap/config/lastnodiff
        rm -f /boot/config/plugins/dwsnap/config/syncneeded
    fi
    if [ "$DIFFRET" -eq 2 ]; then
        touch /boot/config/plugins/dwsnap/config/syncneeded
        rm -f /boot/config/plugins/dwsnap/config/lastnodiff
    fi
    
    EQ_COUNT=$(grep -w '^ \{1,\}[0-9]* equal' <<< "$DIFFS" | sed 's/^ *//g' | cut -d ' ' -f1)
    ADD_COUNT=$(grep -w '^ \{1,\}[0-9]* added' <<< "$DIFFS" | sed 's/^ *//g' | cut -d ' ' -f1)
    DEL_COUNT=$(grep -w '^ \{1,\}[0-9]* removed' <<< "$DIFFS" | sed 's/^ *//g' | cut -d ' ' -f1)
    UPDATE_COUNT=$(grep -w '^ \{1,\}[0-9]* updated' <<< "$DIFFS" | sed 's/^ *//g' | cut -d ' ' -f1)
    MOVE_COUNT=$(grep -w '^ \{1,\}[0-9]* moved' <<< "$DIFFS" | sed 's/^ *//g' | cut -d ' ' -f1)
    COPY_COUNT=$(grep -w '^ \{1,\}[0-9]* copied' <<< "$DIFFS" | sed 's/^ *//g' | cut -d ' ' -f1)
    RESTORE_COUNT=$(grep -w '^ \{1,\}[0-9]* restored' <<< "$DIFFS" | sed 's/^ *//g' | cut -d ' ' -f1)

    if [ -z "$DEL_COUNT" ] || [ -z "$ADD_COUNT" ] || [ -z "$MOVE_COUNT" ] || [ -z "$COPY_COUNT" ] || [ -z "$UPDATE_COUNT" ] || [ -z "$RESTORE_COUNT" ]; then
        echo "### CRON -- Checking for differences has failed, exiting..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
        FAILUREMSG="The checking for differences has failed - check LOG."
        failure_exit_cron
    fi

    echo "### CRON -- Equal [$EQ_COUNT] - Added [$ADD_COUNT] - Deleted [$DEL_COUNT] - Moved [$MOVE_COUNT] - Copied [$COPY_COUNT] - Updated [$UPDATE_COUNT] - Restored [$RESTORE_COUNT]"  2>&1 | tee -a /var/lib/snapraid/logs/snaplog

    if [ "$ADDED" -ge 0 ] && [ "$ADD_COUNT" -gt "$ADDED" ]; then
        echo "### CRON -- Added count ${ADD_COUNT} exceeded threshold ${ADDED}, exiting..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
        FAILUREMSG="The added count ${ADD_COUNT} exceeded the threshold ${ADDED} - check LOG."
        failure_exit_cron
    fi
    if [ "$DELETED" -ge 0 ] && [ "$DEL_COUNT" -gt "$DELETED" ]; then
        echo "### CRON -- Deleted count ${DEL_COUNT} exceeded threshold ${DELETED}, exiting..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
        FAILUREMSG="The deleted count ${DEL_COUNT} exceeded the threshold ${DELETED} - check LOG."
        failure_exit_cron
    fi
    if [ "$MOVED" -ge 0 ] && [ "$MOVE_COUNT" -gt "$MOVED" ]; then
        echo "### CRON -- Moved count ${MOVE_COUNT} exceeded threshold ${MOVED}, exiting..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
        FAILUREMSG="The moved count ${MOVE_COUNT} exceeded the threshold ${MOVED} - check LOG."
        failure_exit_cron
    fi
    if [ "$COPIED" -ge 0 ] && [ "$COPY_COUNT" -gt "$COPIED" ]; then
        echo "### CRON -- Copied count ${COPY_COUNT} exceeded threshold ${COPIED}, exiting..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
        FAILUREMSG="The copied count ${COPY_COUNT} exceeded the threshold ${COPIED} - check LOG."
        failure_exit_cron
    fi
    if [ "$UPDATED" -ge 0 ] && [ "$UPDATE_COUNT" -gt "$UPDATED" ]; then
        echo "### CRON -- Updated count ${UPDATE_COUNT} exceeded threshold ${UPDATED}, exiting..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
        FAILUREMSG="The updated count ${UPDATE_COUNT} exceeded the threshold ${UPDATED} - check LOG."
        failure_exit_cron
    fi
    if [ "$RESTORED" -ge 0 ] && [ "$RESTORE_COUNT" -gt "$RESTORED" ]; then
        echo "### CRON -- Restored count ${RESTORE_COUNT} exceeded threshold ${RESTORED}, exiting..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
        FAILUREMSG="The restored count ${RESTORE_COUNT} exceeded the threshold ${RESTORED} - check LOG."
        failure_exit_cron
    fi
    echo "### CRON -- No difference thresholds have been exceeded, proceeding..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
    SUCCESSOPS+=("DIFF")
else
    echo "### CRON -- Checking for differences is disabled, proceeding..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
fi

echo "################################################################" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog

if [ "$SYNC" == "enable" ]; then
    RUNNINGOP="SYNC"
    if [ "$DIFF" == "enable" ] && [ "$DIFFRET" -eq 0 ] && [ "$ADD_COUNT" -eq 0 ] && [ "$DEL_COUNT" -eq 0 ] && [ "$MOVE_COUNT" -eq 0 ] && [ "$COPY_COUNT" -eq 0 ] && [ "$UPDATE_COUNT" -eq 0 ] && [ "$RESTORE_COUNT" -eq 0 ]; then
        echo "### CRON -- No differences detected (skipping sync), proceeding..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
    else
        if [ "$FORCEZERO" == "enable" ]; then
            FORCEZEROARG="-Z"
            FORCEZEROMSG=" (w/ Force Zero)"
        fi
        if [ -n "$SYNCERRORS" ] && [[ $SYNCERRORS =~ ^[0-9]+$ ]] && [ "$SYNCERRORS" != "100" ]; then
            SYNCERRORARG="-L ${SYNCERRORS}"
            SYNCERRORMSG=" (w/ IO Error Limit: $SYNCERRORS)"
        fi
        if [ "$PREHASH" == "enable" ]; then
            echo "### CRON -- Prehashed Syncing...${FORCEZEROMSG}${SYNCERRORMSG}" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
            if ! $SNAP_BIN -c $SNAP_CONF -l "/var/lib/snapraid/logs/cron-${LOGTIME}/03-hsync-${LOGTIME}.log" $QUIETARG -h $FORCEZEROARG $SYNCERRORARG sync >>/var/lib/snapraid/logs/snaplog 2>&1; then
                echo "### CRON -- Prehashed Sync has failed, exiting..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
                FAILUREMSG="The prehashed sync has failed - check LOG."
                failure_exit_cron
            else
                OPTIME=$(date +"%d.%m.%Y %H:%M:%S %Z")
                echo "$OPTIME" > /boot/config/plugins/dwsnap/config/lastsync
                rm -f /boot/config/plugins/dwsnap/config/syncneeded
                rm -f /boot/config/plugins/dwsnap/config/lastnodiff
            fi
            echo "### CRON -- Prehashed Sync has finished, proceeding..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
        else
            echo "### CRON -- Syncing...${FORCEZEROMSG}${SYNCERRORMSG}" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
            if ! $SNAP_BIN -c $SNAP_CONF -l "/var/lib/snapraid/logs/cron-${LOGTIME}/03-sync-${LOGTIME}.log" $QUIETARG $FORCEZEROARG $SYNCERRORARG sync >>/var/lib/snapraid/logs/snaplog 2>&1; then
                echo "### CRON -- Sync has failed, exiting..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
                FAILUREMSG="The sync has failed - check LOG."
                failure_exit_cron
            else
                OPTIME=$(date +"%d.%m.%Y %H:%M:%S %Z")
                echo "$OPTIME" > /boot/config/plugins/dwsnap/config/lastsync
                rm -f /boot/config/plugins/dwsnap/config/syncneeded
                rm -f /boot/config/plugins/dwsnap/config/lastnodiff
            fi
            echo "### CRON -- Sync has finished, proceeding..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
        fi
    fi
    SUCCESSOPS+=("SYNC")
else
    echo "### CRON -- Sync is disabled, proceeding..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
fi

echo "################################################################" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog

if [ "$SCRUB" == "enable" ]; then
    if [ -n "$SCRUBERRORS" ] && [[ $SCRUBERRORS =~ ^[0-9]+$ ]] && [ "$SCRUBERRORS" != "100" ]; then
        SCRUBERRORARG="-L ${SCRUBERRORS}"
        SCRUBERRORMSG=" (w/ IO Error Limit: $SCRUBERRORS)"
    fi
    if [ "$SCRUBNEW" == "enable" ]; then
        RUNNINGOP="SCRUBNEW"
        echo "### CRON -- Scrubbing New Blocks...${SCRUBERRORMSG}" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
        if ! $SNAP_BIN -c $SNAP_CONF -l "/var/lib/snapraid/logs/cron-${LOGTIME}/04a-scrubnew-${LOGTIME}.log" $QUIETARG -p new $SCRUBERRORARG scrub >>/var/lib/snapraid/logs/snaplog 2>&1; then
                echo "### CRON -- Scrub New Blocks has failed, exiting..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
                FAILUREMSG="The new block scrub has failed - check LOG."
                failure_exit_cron
        else
            OPTIME=$(date +"%d.%m.%Y %H:%M:%S %Z")
            echo "$OPTIME" > /boot/config/plugins/dwsnap/config/lastscrub
        fi
        echo "### CRON -- Scrub New Blocks has finished, proceeding..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
        echo "################################################################" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
        SUCCESSOPS+=("SCRUBNEW")
    fi
    RUNNINGOP="SCRUB"
    echo "### CRON -- Scrubbing [${SCRUBPERCENT} % / ${SCRUBAGE} days age]...${SCRUBERRORMSG}" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
    if ! $SNAP_BIN -c $SNAP_CONF -l "/var/lib/snapraid/logs/cron-${LOGTIME}/04b-scrub-${LOGTIME}.log" $QUIETARG -p "$SCRUBPERCENT" -o "$SCRUBAGE" $SCRUBERRORARG scrub >>/var/lib/snapraid/logs/snaplog 2>&1; then
            echo "### CRON -- Scrub has failed, exiting..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
            FAILUREMSG="The scrub has failed - check LOG."
            failure_exit_cron
    else
        OPTIME=$(date +"%d.%m.%Y %H:%M:%S %Z")
        echo "$OPTIME" > /boot/config/plugins/dwsnap/config/lastscrub
    fi
    echo "### CRON -- Scrub has finished, proceeding..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
    SUCCESSOPS+=("SCRUB")
else
    echo "### CRON -- Scrub is disabled, proceeding..." 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
fi

RUNNINGOP="FINALIZE"

OPTIME=$(date +"%d.%m.%Y %H:%M:%S %Z")
MEASURESTOP=$(date +%s)
DURATION=$((MEASURESTOP-MEASURESTART))
DURATIONUNIT="seconds"
[ "$DURATION" -ge 60 ] && DURATION=$((DURATION/60)) && DURATIONUNIT="minutes"
[ "$DURATION" -ge 60 ] && DURATION=$((DURATION/60)) && DURATIONUNIT="hours"

echo "$OPTIME" >/var/lib/snapraid/logs/lastfinish
echo "################################################################" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
echo "### CRON -- FINISHED: ${OPTIME} (after ${DURATION} ${DURATIONUNIT})" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog
[ -n "$RAMWARNING" ] && echo "### CRON --${RAMWARNING}" 2>&1 | tee -a /var/lib/snapraid/logs/snaplog

cp /var/lib/snapraid/logs/snaplog "/var/lib/snapraid/logs/cron-${LOGTIME}.log"

if [ -z "${SUCCESSOPS[*]}" ]; then
    [ "$FINISHNOTIFY" == "enable" ] && $NOTIFY_BIN -e "${EVENT}" -s "Notice ${SUBJECT} Maintenance Finished" -d "SnapRAID maintenance finished with success (after ${DURATION} ${DURATIONUNIT}). No operations performed without errors.${RAMWARNINGSHORT}" -i "normal"
else
    [ "$FINISHNOTIFY" == "enable" ] && $NOTIFY_BIN -e "${EVENT}" -s "Notice ${SUBJECT} Maintenance Finished" -d "SnapRAID maintenance finished with success (after ${DURATION} ${DURATIONUNIT}). ${SUCCESSOPS[*]} performed without errors.${RAMWARNINGSHORT}" -i "normal"
fi

exit 0
