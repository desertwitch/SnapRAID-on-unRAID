#!/bin/bash
#
# Copyright Derek Macias (parts of code from NUT package)
# Copyright macester (parts of code from NUT package)
# Copyright gfjardim (parts of code from NUT package)
# Copyright SimonF (parts of code from NUT package)
# Copyright Lime Technology (any and all other parts of Unraid)
#
# Copyright Oliver Cervera (parts of code from snapraid-aio-script)
# Copyright desertwitch (as author and maintainer of this file)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 2
# as published by the Free Software Foundation.
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
umask 000

CMD=("$@")
CFGNAME="${CMD[0]}"
CFGNAMEBIG=$(echo "$CFGNAME" | awk '{print toupper($0)}')

NOTIFYFLAG="${CMD[1]}"
OPCMD="${CMD[2]}"

SNAP_BIN="/usr/bin/snapraid"
SNAP_CONF="/boot/config/plugins/dwsnap/config/${CFGNAME}.conf"
CONFIG="/boot/config/plugins/dwsnap/config/${CFGNAME}.cfg"

if [ -z "$CFGNAME" ]; then
    echo "A backend helper program that facilitates communication between SnapRAID and UNRAID's web interface."
    echo "Usage: snapraid-runner <array name> <0|1> status|diff|sync|scrub|list|dup|up|down|touch|smart|pool|check|fix [options]"
    echo "-- <array name>: name of the array configuration to perform the operation on (example: primary)"
    echo "-- <0|1>: send notifications once the requested operation completes (0:no/1:yes)"
    echo "-- [options]: optional parameters for the requested operation (see SnapRAID manual)"
    echo ""
    echo "(${CFGNAME}) [error] SnapRAID array configuration name was not provided, exiting..." | logger -s -t "snapraid-runner"
    exit 1
fi

if [ ! -r "$SNAP_CONF" ] || [ ! -r "$CONFIG" ]; then
    echo "A backend helper program that facilitates communication between SnapRAID and UNRAID's web interface."
    echo "Usage: snapraid-runner <array name> <0|1> status|diff|sync|scrub|list|dup|up|down|touch|smart|pool|check|fix [options]"
    echo "-- <array name>: name of the array configuration to perform the operation on (example: primary)"
    echo "-- <0|1>: send notifications once the requested operation completes (0:no/1:yes)"
    echo "-- [options]: optional parameters for the requested operation (see SnapRAID manual)"
    echo ""
    echo "(${CFGNAME}) [error] SnapRAID array configuration specified was not found/readable, exiting..." | logger -s -t "snapraid-runner"
    exit 1
fi

if [ "${NOTIFYFLAG}" == "0" ] || [ "${NOTIFYFLAG}" == "1" ]; then
    if [ "${NOTIFYFLAG}" == "1" ]; then
        NOTIFYDONE="YES"
    fi
else
    echo "A backend helper program that facilitates communication between SnapRAID and UNRAID's web interface."
    echo "Usage: snapraid-runner <array name> <0|1> status|diff|sync|scrub|list|dup|up|down|touch|smart|pool|check|fix [options]"
    echo "-- <array name>: name of the array configuration to perform the operation on (example: primary)"
    echo "-- <0|1>: send notifications once the requested operation completes (0:no/1:yes)"
    echo "-- [options]: optional parameters for the requested operation (see SnapRAID manual)"
    echo ""
    echo "(${CFGNAME}) [error] No valid notification setting was provided, exiting..." | logger -s -t "snapraid-runner"
    exit 1
fi

KNOWNCMDS=("status" "diff" "sync" "scrub" "list" "dup" "up" "down" "touch" "smart" "pool" "check" "fix")
for KNOWNCMD in "${KNOWNCMDS[@]}"; do
    if [ "$OPCMD" == "$KNOWNCMD" ]; then
        CMDKNOWN="YES"
    fi
done
if [ ! "$CMDKNOWN" == "YES" ]; then
    echo "A backend helper program that facilitates communication between SnapRAID and UNRAID's web interface."
    echo "Usage: snapraid-runner <array name> <0|1> status|diff|sync|scrub|list|dup|up|down|touch|smart|pool|check|fix [options]"
    echo "-- <array name>: name of the array configuration to perform the operation on (example: primary)"
    echo "-- <0|1>: send notifications once the requested operation completes (0:no/1:yes)"
    echo "-- [options]: optional parameters for the requested operation (see SnapRAID manual)"
    echo ""
    echo "(${CFGNAME}) [error] No valid operation command was provided, exiting..." | logger -s -t "snapraid-runner"
    exit 1
fi

if pgrep -f "^(/usr/bin/ionice -c [0-9] )?/usr/bin/snapraid -c ${SNAP_CONF}" >/dev/null 2>&1 || pgrep -f "^(/bin/bash )?/usr/bin/snapraid-cron ${CFGNAME}" >/dev/null 2>&1; then
    echo "A backend helper program that facilitates communication between SnapRAID and UNRAID's web interface."
    echo "Usage: snapraid-runner <array name> <0|1> status|diff|sync|scrub|list|dup|up|down|touch|smart|pool|check|fix [options]"
    echo "-- <array name>: name of the array configuration to perform the operation on (example: primary)"
    echo "-- <0|1>: send notifications once the requested operation completes (0:no/1:yes)"
    echo "-- [options]: optional parameters for the requested operation (see SnapRAID manual)"
    echo ""
    echo "(${CFGNAME}) [error] SnapRAID is already running on the specified array, exiting..." | logger -s -t "snapraid-runner"
    exit 1
fi

[ ! -d "/var/lib/snapraid/logs/${CFGNAME}" ] && mkdir -p "/var/lib/snapraid/logs/${CFGNAME}"

if ! source "$CONFIG"; then
    echo "A backend helper program that facilitates communication between SnapRAID and UNRAID's web interface."
    echo "Usage: snapraid-runner <array name> <0|1> status|diff|sync|scrub|list|dup|up|down|touch|smart|pool|check|fix [options]"
    echo "-- <array name>: name of the array configuration to perform the operation on (example: primary)"
    echo "-- <0|1>: send notifications once the requested operation completes (0:no/1:yes)"
    echo "-- [options]: optional parameters for the requested operation (see SnapRAID manual)"
    echo ""
    echo "(${CFGNAME}) [error] SnapRAID array settings file cannot be parsed, exiting..." | logger -s -t "snapraid-runner"
    exit 1
fi

if [ -x "/usr/bin/ionice" ]; then
    [ "$PRIO" == "idle" ] && SNAP_BIN="/usr/bin/ionice -c 3 /usr/bin/snapraid"
    [ "$PRIO" == "besteffort" ] && SNAP_BIN="/usr/bin/ionice -c 2 /usr/bin/snapraid"
    [ "$PRIO" == "realtime" ] && SNAP_BIN="/usr/bin/ionice -c 1 /usr/bin/snapraid"
fi

[ "$RAWREPORTS" == "manual" ] && RAWREPORTS="enable"
for LOGPARAM in "${CMD[@]:2}"; do
    if [ "$LOGPARAM" == "-l" ]; then
        RAWREPORTS="disable"
    fi
done

NOTIFY_BIN="/usr/local/emhttp/plugins/dynamix/scripts/notify"
HOST=$(echo "$HOSTNAME" | awk '{print toupper($0)}')
EVENT="SnapRAID Operation"
SUBJECT="[${HOST}] SnapRAID - ${CFGNAMEBIG}:"

# shellcheck disable=SC2317
signal_exit_snapraid() {
    OPTIME=$(date +"%d.%m.%Y %H:%M:%S %Z")
    MEASURESTOP=$(date +%s)
    DURATION=$((MEASURESTOP-MEASURESTART))
    DURATIONUNIT="seconds"
    [ "$DURATION" -ge 60 ] && DURATION=$((DURATION/60)) && DURATIONUNIT="minutes"
    [ "$DURATION" -ge 60 ] && DURATION=$((DURATION/60)) && DURATIONUNIT="hours"

    [ "$NOTIFYDONE" == "YES" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Alert ${SUBJECT} Operation Interrupted" -d "SnapRAID operation ${BIGOP} was interrupted (after ${DURATION} ${DURATIONUNIT}).${RAMWARNINGSHORT}" -i "alert"

    echo "$OPTIME" >"/var/lib/snapraid/logs/${CFGNAME}-lastfinish"
    echo "################################################################" 2>&1 | tee -i -a "/var/lib/snapraid/logs/${CFGNAME}-snaplog"
    echo "### (${CFGNAMEBIG}) ${BIGOP} INTERRUPTED [SIGTERM]: ${OPTIME} (after ${DURATION} ${DURATIONUNIT})" 2>&1 | tee -i -a "/var/lib/snapraid/logs/${CFGNAME}-snaplog"
    [ -n "$RAMWARNING" ] && echo "### (${CFGNAMEBIG})${RAMWARNING}" 2>&1 | tee -i -a "/var/lib/snapraid/logs/${CFGNAME}-snaplog"

    cp "/var/lib/snapraid/logs/${CFGNAME}-snaplog" "/var/lib/snapraid/logs/${CFGNAME}/${OPCMD}-${LOGTIME}.log"
    
    exit 1
}

BIGOP=$(echo "${OPCMD}" | awk '{print toupper($0)}')

rm -f "/var/lib/snapraid/logs/${CFGNAME}-lastfinish"
LOGTIME=$(date +"%Y%m%d-%H%M%S")
OPTIME=$(date +"%d.%m.%Y %H:%M:%S %Z")
MEASURESTART=$(date +%s)

echo "$OPTIME" >"/var/lib/snapraid/logs/${CFGNAME}-laststart"
echo "### (${CFGNAMEBIG}) ${BIGOP} STARTED: ${OPTIME}" 2>&1 | tee -i "/var/lib/snapraid/logs/${CFGNAME}-snaplog"
echo "### (${CFGNAMEBIG}) RUNNING: ${SNAP_BIN} -c ${SNAP_CONF} ${CMD[*]:2}" 2>&1 | tee -i -a "/var/lib/snapraid/logs/${CFGNAME}-snaplog" 

RAMUTIL=$(df --output=pcent /var/lib/snapraid | tr -dc '0-9')
if [ "$RAMUTIL" -gt 90 ]; then
    RAMWARNING=" RAM disk utilization above 90% - clear the logfiles to avoid future problems!"
    RAMWARNINGSHORT=" RAM disk utilization above 90%."
    echo "### (${CFGNAMEBIG})${RAMWARNING}" 2>&1 | tee -i -a "/var/lib/snapraid/logs/${CFGNAME}-snaplog"
fi

echo "################################################################" 2>&1 | tee -i -a "/var/lib/snapraid/logs/${CFGNAME}-snaplog"

trap signal_exit_snapraid SIGTERM SIGINT 

if [ "${OPCMD}" == "sync" ]; then
    # shellcheck disable=SC2015
    [ "$RAWREPORTS" == "enable" ] && LOGLINE="/var/lib/snapraid/logs/${CFGNAME}/${OPCMD}-${LOGTIME}.raw.log" || unset LOGLINE
    $SNAP_BIN -c "$SNAP_CONF" ${LOGLINE:+"-l"} ${LOGLINE:+"$LOGLINE"} "${CMD[@]:2}" 2>&1 | tee -i -a "/var/lib/snapraid/logs/${CFGNAME}-snaplog"
    CMDRET="${PIPESTATUS[0]}"
    
    OPTIME=$(date +"%d.%m.%Y %H:%M:%S %Z")
    MEASURESTOP=$(date +%s)
    DURATION=$((MEASURESTOP-MEASURESTART))
    DURATIONUNIT="seconds"
    [ "$DURATION" -ge 60 ] && DURATION=$((DURATION/60)) && DURATIONUNIT="minutes"
    [ "$DURATION" -ge 60 ] && DURATION=$((DURATION/60)) && DURATIONUNIT="hours"

    if [ "$CMDRET" -eq 0 ]; then
        echo "$OPTIME" > "/boot/config/plugins/dwsnap/config/${CFGNAME}-lastsync"
        rm -f "/boot/config/plugins/dwsnap/config/${CFGNAME}-syncneeded"
        rm -f "/boot/config/plugins/dwsnap/config/${CFGNAME}-lastnodiff"
        [ "$NOTIFYDONE" == "YES" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Notice ${SUBJECT} Operation Finished" -d "SnapRAID operation ${BIGOP} finished with success (after ${DURATION} ${DURATIONUNIT}).${RAMWARNINGSHORT}" -i "normal"
    else
        [ "$NOTIFYDONE" == "YES" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Alert ${SUBJECT} Operation Failure" -d "SnapRAID operation ${BIGOP} finished with errors (after ${DURATION} ${DURATIONUNIT}).${RAMWARNINGSHORT}" -i "alert"
    fi
elif [ "${OPCMD}" == "scrub" ]; then
    # shellcheck disable=SC2015
    [ "$RAWREPORTS" == "enable" ] && LOGLINE="/var/lib/snapraid/logs/${CFGNAME}/${OPCMD}-${LOGTIME}.raw.log" || unset LOGLINE
    $SNAP_BIN -c "$SNAP_CONF" ${LOGLINE:+"-l"} ${LOGLINE:+"$LOGLINE"} "${CMD[@]:2}" 2>&1 | tee -i -a "/var/lib/snapraid/logs/${CFGNAME}-snaplog"
    CMDRET="${PIPESTATUS[0]}"
    
    OPTIME=$(date +"%d.%m.%Y %H:%M:%S %Z")
    MEASURESTOP=$(date +%s)
    DURATION=$((MEASURESTOP-MEASURESTART))
    DURATIONUNIT="seconds"
    [ "$DURATION" -ge 60 ] && DURATION=$((DURATION/60)) && DURATIONUNIT="minutes"
    [ "$DURATION" -ge 60 ] && DURATION=$((DURATION/60)) && DURATIONUNIT="hours"

    if [ "$CMDRET" -eq 0 ]; then
        echo "$OPTIME" > "/boot/config/plugins/dwsnap/config/${CFGNAME}-lastscrub"
        [ "$NOTIFYDONE" == "YES" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Notice ${SUBJECT} Operation Finished" -d "SnapRAID operation ${BIGOP} finished with success (after ${DURATION} ${DURATIONUNIT}).${RAMWARNINGSHORT}" -i "normal"
    else
        [ "$NOTIFYDONE" == "YES" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Alert ${SUBJECT} Operation Failure" -d "SnapRAID operation ${BIGOP} finished with errors (after ${DURATION} ${DURATIONUNIT}).${RAMWARNINGSHORT}" -i "alert"
    fi
elif [ "${OPCMD}" == "diff" ]; then
    # shellcheck disable=SC2015
    [ "$RAWREPORTS" == "enable" ] && LOGLINE="/var/lib/snapraid/logs/${CFGNAME}/${OPCMD}-${LOGTIME}.raw.log" || unset LOGLINE
    $SNAP_BIN -c "$SNAP_CONF" ${LOGLINE:+"-l"} ${LOGLINE:+"$LOGLINE"} "${CMD[@]:2}" 2>&1 | tee -i -a "/var/lib/snapraid/logs/${CFGNAME}-snaplog"
    CMDRET="${PIPESTATUS[0]}"
    
    OPTIME=$(date +"%d.%m.%Y %H:%M:%S %Z")
    MEASURESTOP=$(date +%s)
    DURATION=$((MEASURESTOP-MEASURESTART))
    DURATIONUNIT="seconds"
    [ "$DURATION" -ge 60 ] && DURATION=$((DURATION/60)) && DURATIONUNIT="minutes"
    [ "$DURATION" -ge 60 ] && DURATION=$((DURATION/60)) && DURATIONUNIT="hours"

    if [ "$CMDRET" -eq 0 ]; then
        echo "$OPTIME" >"/boot/config/plugins/dwsnap/config/${CFGNAME}-lastnodiff"
        rm -f "/boot/config/plugins/dwsnap/config/${CFGNAME}-syncneeded"
        [ "$NOTIFYDONE" == "YES" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Notice ${SUBJECT} Operation Finished" -d "SnapRAID operation ${BIGOP} finished with success (after ${DURATION} ${DURATIONUNIT}).${RAMWARNINGSHORT}" -i "normal"
    elif [ "$CMDRET" -eq 2 ]; then
        touch "/boot/config/plugins/dwsnap/config/${CFGNAME}-syncneeded"
        rm -f "/boot/config/plugins/dwsnap/config/${CFGNAME}-lastnodiff"
        [ "$NOTIFYDONE" == "YES" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Notice ${SUBJECT} Operation Warnings" -d "SnapRAID operation ${BIGOP} finished with warnings (after ${DURATION} ${DURATIONUNIT}). Data differences were found (not in sync).${RAMWARNINGSHORT}" -i "warning"
    else
        [ "$NOTIFYDONE" == "YES" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Alert ${SUBJECT} Operation Failure" -d "SnapRAID operation ${BIGOP} finished with errors (after ${DURATION} ${DURATIONUNIT}).${RAMWARNINGSHORT}" -i "alert"
    fi
else
    # shellcheck disable=SC2015
    [ "$RAWREPORTS" == "enable" ] && LOGLINE="/var/lib/snapraid/logs/${CFGNAME}/${OPCMD}-${LOGTIME}.raw.log" || unset LOGLINE
    $SNAP_BIN -c "$SNAP_CONF" ${LOGLINE:+"-l"} ${LOGLINE:+"$LOGLINE"} "${CMD[@]:2}" 2>&1 | tee -i -a "/var/lib/snapraid/logs/${CFGNAME}-snaplog"
    CMDRET="${PIPESTATUS[0]}"
    
    OPTIME=$(date +"%d.%m.%Y %H:%M:%S %Z")
    MEASURESTOP=$(date +%s)
    DURATION=$((MEASURESTOP-MEASURESTART))
    DURATIONUNIT="seconds"
    [ "$DURATION" -ge 60 ] && DURATION=$((DURATION/60)) && DURATIONUNIT="minutes"
    [ "$DURATION" -ge 60 ] && DURATION=$((DURATION/60)) && DURATIONUNIT="hours"

    if [ "$CMDRET" -eq 0 ]; then
        [ "$NOTIFYDONE" == "YES" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Notice ${SUBJECT} Operation Finished" -d "SnapRAID operation ${BIGOP} finished with success (after ${DURATION} ${DURATIONUNIT}).${RAMWARNINGSHORT}" -i "normal"
    else
        [ "$NOTIFYDONE" == "YES" ] && "$NOTIFY_BIN" -e "${EVENT}" -s "Alert ${SUBJECT} Operation Failure" -d "SnapRAID operation ${BIGOP} finished with errors (after ${DURATION} ${DURATIONUNIT}).${RAMWARNINGSHORT}" -i "alert"
    fi
fi

echo "$OPTIME" >"/var/lib/snapraid/logs/${CFGNAME}-lastfinish"
echo "################################################################" 2>&1 | tee -i -a "/var/lib/snapraid/logs/${CFGNAME}-snaplog"
echo "### (${CFGNAMEBIG}) ${BIGOP} FINISHED: ${OPTIME} (after ${DURATION} ${DURATIONUNIT})" 2>&1 | tee -i -a "/var/lib/snapraid/logs/${CFGNAME}-snaplog"
[ -n "$RAMWARNING" ] && echo "### (${CFGNAMEBIG})${RAMWARNING}" 2>&1 | tee -i -a "/var/lib/snapraid/logs/${CFGNAME}-snaplog"

cp "/var/lib/snapraid/logs/${CFGNAME}-snaplog" "/var/lib/snapraid/logs/${CFGNAME}/${OPCMD}-${LOGTIME}.log"

exit 0
